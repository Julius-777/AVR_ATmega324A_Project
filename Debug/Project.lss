
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001f36  00001fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014e  008001a2  008001a2  0000206c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000360  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bf4  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000de2  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001074  00000000  00000000  00005dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000914  00000000  00000000  00006e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cd0  00000000  00000000  00007788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001be8  00000000  00000000  00008458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 01 	jmp	0x288	; 0x288 <__ctors_end>
       4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
       8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
       c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      10:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      14:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_5>
      18:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      1c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      20:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      24:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      28:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      2c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      30:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      34:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      38:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      3c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      40:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_16>
      44:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      48:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      4c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      50:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_20>
      54:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_21>
      58:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      5c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      60:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      64:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      68:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      6c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      70:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      74:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>
      78:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	20 20       	and	r2, r0
      7e:	20 20       	and	r2, r0
      80:	20 20       	and	r2, r0
      82:	20 20       	and	r2, r0
      84:	20 20       	and	r2, r0
      86:	20 20       	and	r2, r0
      88:	20 20       	and	r2, r0
      8a:	20 20       	and	r2, r0
      8c:	20 20       	and	r2, r0
      8e:	20 20       	and	r2, r0
      90:	20 20       	and	r2, r0
      92:	20 20       	and	r2, r0
      94:	20 20       	and	r2, r0
      96:	20 20       	and	r2, r0
      98:	20 00       	.word	0x0020	; ????

0000009a <__c.2313>:
      9a:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

000000a7 <__c.2311>:
      a7:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b7:	6f 20 63 6f 6e 74 69 6e 75 65 00                    o continue.

000000c2 <__c.2309>:
      c2:	4c 41 50 20 43 4f 4d 50 4c 45 54 45 00              LAP COMPLETE.

000000cf <__c.2298>:
      cf:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      df:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ed <__c.2296>:
      ed:	47 41 4d 45 20 4f 56 45 52 20 20 20 00              GAME OVER   .

000000fa <__c.2292>:
      fa:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000117 <__c.2290>:
     117:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     127:	20 20 20 20 20 20 00                                      .

0000012e <__c.2283>:
     12e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     13e:	6f 20 63 6f 6e 74 69 6e 75 65 20 20 20 00           o continue   .

0000014c <__c.2281>:
     14c:	59 6f 75 20 63 72 61 73 68 65 64 20 20 20 20 20     You crashed     
	...

0000015d <__c.2243>:
     15d:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     16d:	6f 6a 65 63 74 20 62 79 20 4a 75 6c 69 75 73 20     oject by Julius 
     17d:	4d 69 79 75 6d 6f 00                                Miyumo.

00000184 <__c.2241>:
     184:	52 61 6c 6c 79 52 61 63 65 72 00                    RallyRacer.

0000018f <numbers>:
     18f:	fa 01 f7 01 f3 01 ef 01 eb 01 e7 01 e3 01 df 01     ................
     19f:	db 01 d7 01                                         ....

000001a3 <letters>:
     1a3:	69 02 65 02 61 02 5d 02 59 02 55 02 51 02 4d 02     i.e.a.].Y.U.Q.M.
     1b3:	4a 02 46 02 42 02 3e 02 39 02 35 02 31 02 2d 02     J.F.B.>.9.5.1.-.
     1c3:	28 02 24 02 20 02 1b 02 17 02 12 02 0d 02 08 02     (.$. ...........
     1d3:	03 02 fe 01                                         ....

000001d7 <cols_9>:
     1d7:	64 92 92 7d                                         d..}

000001db <cols_8>:
     1db:	6c 92 92 6d                                         l..m

000001df <cols_7>:
     1df:	80 9e a0 c1                                         ....

000001e3 <cols_6>:
     1e3:	7c 92 92 4d                                         |..M

000001e7 <cols_5>:
     1e7:	e4 a2 a2 9d                                         ....

000001eb <cols_4>:
     1eb:	18 28 48 ff                                         .(H.

000001ef <cols_3>:
     1ef:	44 92 92 6d                                         D..m

000001f3 <cols_2>:
     1f3:	46 8a 92 63                                         F..c

000001f7 <cols_1>:
     1f7:	42 fe 03                                            B..

000001fa <cols_0>:
     1fa:	7c 92 a2 7d                                         |..}

000001fe <cols_z>:
     1fe:	86 8a 92 a2 c3                                      .....

00000203 <cols_y>:
     203:	e0 10 0e 10 e1                                      .....

00000208 <cols_x>:
     208:	c6 28 10 28 c7                                      .(.(.

0000020d <cols_w>:
     20d:	fc 02 1c 02 fd                                      .....

00000212 <cols_v>:
     212:	f8 04 02 04 f9                                      .....

00000217 <cols_u>:
     217:	fc 02 02 fd                                         ....

0000021b <cols_t>:
     21b:	80 80 fe 80 81                                      .....

00000220 <cols_s>:
     220:	64 92 92 4d                                         d..M

00000224 <cols_r>:
     224:	fe 90 98 67                                         ...g

00000228 <cols_q>:
     228:	7c 82 8a 7c 03                                      |..|.

0000022d <cols_p>:
     22d:	fe 90 90 61                                         ...a

00000231 <cols_o>:
     231:	7c 82 82 7d                                         |..}

00000235 <cols_n>:
     235:	fe 20 10 ff                                         . ..

00000239 <cols_m>:
     239:	fe 40 30 40 ff                                      .@0@.

0000023e <cols_l>:
     23e:	fe 02 02 03                                         ....

00000242 <cols_k>:
     242:	fe 10 28 c7                                         ..(.

00000246 <cols_j>:
     246:	04 02 02 fd                                         ....

0000024a <cols_i>:
     24a:	82 fe 83                                            ...

0000024d <cols_h>:
     24d:	fe 10 10 ff                                         ....

00000251 <cols_g>:
     251:	7c 82 92 5d                                         |..]

00000255 <cols_f>:
     255:	fe 90 90 81                                         ....

00000259 <cols_e>:
     259:	fe 92 92 83                                         ....

0000025d <cols_d>:
     25d:	fe 82 82 7d                                         ...}

00000261 <cols_c>:
     261:	7c 82 82 45                                         |..E

00000265 <cols_b>:
     265:	fe 92 92 6d                                         ...m

00000269 <cols_a>:
     269:	7e 90 90 7f                                         ~...

0000026d <__c.1870>:
     26d:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000274 <__c.1866>:
     274:	1b 5b 25 64 6d 00                                   .[%dm.

0000027a <__c.1856>:
     27a:	1b 5b 32 4a 00                                      .[2J.

0000027f <__c.1841>:
     27f:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d8 e0       	ldi	r29, 0x08	; 8
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61

00000294 <__do_copy_data>:
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	a0 e0       	ldi	r26, 0x00	; 0
     298:	b1 e0       	ldi	r27, 0x01	; 1
     29a:	e6 e3       	ldi	r30, 0x36	; 54
     29c:	ff e1       	ldi	r31, 0x1F	; 31
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__do_copy_data+0x10>
     2a0:	05 90       	lpm	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	a2 3a       	cpi	r26, 0xA2	; 162
     2a6:	b1 07       	cpc	r27, r17
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <__do_copy_data+0xc>

000002aa <__do_clear_bss>:
     2aa:	22 e0       	ldi	r18, 0x02	; 2
     2ac:	a2 ea       	ldi	r26, 0xA2	; 162
     2ae:	b1 e0       	ldi	r27, 0x01	; 1
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <.do_clear_bss_start>

000002b2 <.do_clear_bss_loop>:
     2b2:	1d 92       	st	X+, r1

000002b4 <.do_clear_bss_start>:
     2b4:	a0 3f       	cpi	r26, 0xF0	; 240
     2b6:	b2 07       	cpc	r27, r18
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <.do_clear_bss_loop>
     2ba:	0e 94 8c 08 	call	0x1118	; 0x1118 <main>
     2be:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <_exit>

000002c2 <__bad_interrupt>:
     2c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c6 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 69)
	PCICR |= (1<<PCIE1);
     2c6:	e8 e6       	ldi	r30, 0x68	; 104
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	82 60       	ori	r24, 0x02	; 2
     2ce:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 69)
	PCIFR |= (1<<PCIF1);
     2d0:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 70)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     2d2:	ec e6       	ldi	r30, 0x6C	; 108
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 60       	ori	r24, 0x0F	; 15
     2da:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     2dc:	10 92 a2 01 	sts	0x01A2, r1
     2e0:	08 95       	ret

000002e2 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     2e2:	80 91 a2 01 	lds	r24, 0x01A2
     2e6:	18 16       	cp	r1, r24
     2e8:	44 f5       	brge	.+80     	; 0x33a <button_pushed+0x58>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     2ea:	80 91 a3 01 	lds	r24, 0x01A3
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     2ee:	6f b7       	in	r22, 0x3f	; 63
     2f0:	60 78       	andi	r22, 0x80	; 128
		cli();
     2f2:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2f4:	90 91 a2 01 	lds	r25, 0x01A2
     2f8:	92 30       	cpi	r25, 0x02	; 2
     2fa:	b4 f0       	brlt	.+44     	; 0x328 <button_pushed+0x46>
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     302:	f9 01       	movw	r30, r18
     304:	ed 55       	subi	r30, 0x5D	; 93
     306:	fe 4f       	sbci	r31, 0xFE	; 254
     308:	40 81       	ld	r20, Z
     30a:	f9 01       	movw	r30, r18
     30c:	ee 55       	subi	r30, 0x5E	; 94
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	29 2f       	mov	r18, r25
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 91 a2 01 	lds	r20, 0x01A2
     31c:	55 27       	eor	r21, r21
     31e:	47 fd       	sbrc	r20, 7
     320:	50 95       	com	r21
     322:	24 17       	cp	r18, r20
     324:	35 07       	cpc	r19, r21
     326:	6c f3       	brlt	.-38     	; 0x302 <button_pushed+0x20>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     328:	90 91 a2 01 	lds	r25, 0x01A2
     32c:	91 50       	subi	r25, 0x01	; 1
     32e:	90 93 a2 01 	sts	0x01A2, r25
		
		if(interrupts_were_enabled) {
     332:	66 23       	and	r22, r22
     334:	19 f0       	breq	.+6      	; 0x33c <button_pushed+0x5a>
			// Turn them back on again
			sei();
     336:	78 94       	sei
     338:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     33a:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     33c:	08 95       	ret

0000033e <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     35c:	73 b1       	in	r23, 0x03	; 3
     35e:	7f 70       	andi	r23, 0x0F	; 15
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     364:	47 2f       	mov	r20, r23
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	20 91 a2 01 	lds	r18, 0x01A2
     36c:	24 30       	cpi	r18, 0x04	; 4
     36e:	04 f5       	brge	.+64     	; 0x3b0 <__vector_5+0x72>
     370:	9a 01       	movw	r18, r20
     372:	08 2e       	mov	r0, r24
     374:	02 c0       	rjmp	.+4      	; 0x37a <__vector_5+0x3c>
     376:	35 95       	asr	r19
     378:	27 95       	ror	r18
     37a:	0a 94       	dec	r0
     37c:	e2 f7       	brpl	.-8      	; 0x376 <__vector_5+0x38>
     37e:	20 ff       	sbrs	r18, 0
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     382:	20 91 a7 01 	lds	r18, 0x01A7
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	08 2e       	mov	r0, r24
     38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_5+0x52>
     38c:	35 95       	asr	r19
     38e:	27 95       	ror	r18
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <__vector_5+0x4e>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     394:	20 fd       	sbrc	r18, 0
     396:	0c c0       	rjmp	.+24     	; 0x3b0 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     398:	e0 91 a2 01 	lds	r30, 0x01A2
     39c:	21 e0       	ldi	r18, 0x01	; 1
     39e:	2e 0f       	add	r18, r30
     3a0:	20 93 a2 01 	sts	0x01A2, r18
     3a4:	ff 27       	eor	r31, r31
     3a6:	e7 fd       	sbrc	r30, 7
     3a8:	f0 95       	com	r31
     3aa:	ed 55       	subi	r30, 0x5D	; 93
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	80 83       	st	Z, r24
     3b0:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     3b2:	84 30       	cpi	r24, 0x04	; 4
     3b4:	91 05       	cpc	r25, r1
     3b6:	c1 f6       	brne	.-80     	; 0x368 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     3b8:	70 93 a7 01 	sts	0x01A7, r23
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	7f 91       	pop	r23
     3c6:	6f 91       	pop	r22
     3c8:	5f 91       	pop	r21
     3ca:	4f 91       	pop	r20
     3cc:	3f 91       	pop	r19
     3ce:	2f 91       	pop	r18
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <erase_car>:
}

// Erase the car (we assume it hasn't crashed - so we just replace
// the car position with black)
static void erase_car(void) {
	ledmatrix_update_pixel(15 - CAR_START_ROW, car_column, COLOUR_BLACK);
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	60 91 ad 01 	lds	r22, 0x01AD
     3e0:	8e e0       	ldi	r24, 0x0E	; 14
     3e2:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
	ledmatrix_update_pixel(15 - (CAR_START_ROW+1), car_column, COLOUR_BLACK);
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	60 91 ad 01 	lds	r22, 0x01AD
     3ec:	8d e0       	ldi	r24, 0x0D	; 13
     3ee:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
     3f2:	08 95       	ret

000003f4 <redraw_game_row>:
}


// Redraw the row with the given number (0 to 15). The car is not redrawn.
// ROWS in the game are COLUMS in the terminology of the display
static void redraw_game_row(uint8_t row) {	
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	60 97       	sbiw	r28, 0x10	; 16
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn row_display_data; // Note that a game row corresponds to a display
								   // column.
	uint8_t i;
	uint8_t race_row = scroll_position + row;
     408:	e0 91 aa 01 	lds	r30, 0x01AA
     40c:	e8 0f       	add	r30, r24
	if(race_row == 0 || race_row == RACE_DISTANCE) {
     40e:	11 f0       	breq	.+4      	; 0x414 <redraw_game_row+0x20>
     410:	ef 37       	cpi	r30, 0x7F	; 127
     412:	99 f4       	brne	.+38     	; 0x43a <redraw_game_row+0x46>
     414:	fe 01       	movw	r30, r28
     416:	39 96       	adiw	r30, 0x09	; 9
     418:	9e 01       	movw	r18, r28
     41a:	2f 5e       	subi	r18, 0xEF	; 239
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
static void draw_start_or_finish_line(uint8_t row) {
	// Draw a solid line at the given game display row (0 to 15)
	MatrixColumn row_display_data;
	uint8_t i;
	for(i=0;i<=7;i++) {
		row_display_data[i] = COLOUR_FINISH_LINE;
     41e:	9f ef       	ldi	r25, 0xFF	; 255
     420:	91 93       	st	Z+, r25

static void draw_start_or_finish_line(uint8_t row) {
	// Draw a solid line at the given game display row (0 to 15)
	MatrixColumn row_display_data;
	uint8_t i;
	for(i=0;i<=7;i++) {
     422:	e2 17       	cp	r30, r18
     424:	f3 07       	cpc	r31, r19
     426:	e1 f7       	brne	.-8      	; 0x420 <redraw_game_row+0x2c>
		row_display_data[i] = COLOUR_FINISH_LINE;
	}
	ledmatrix_update_column(15 - row, row_display_data);
     428:	be 01       	movw	r22, r28
     42a:	67 5f       	subi	r22, 0xF7	; 247
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	9f e0       	ldi	r25, 0x0F	; 15
     430:	98 1b       	sub	r25, r24
     432:	89 2f       	mov	r24, r25
     434:	0e 94 20 04 	call	0x840	; 0x840 <ledmatrix_update_column>
     438:	25 c0       	rjmp	.+74     	; 0x484 <redraw_game_row+0x90>
	uint8_t i;
	uint8_t race_row = scroll_position + row;
	if(race_row == 0 || race_row == RACE_DISTANCE) {
		draw_start_or_finish_line(row);
	} else {
		uint8_t background_row_data = background_data[race_row % NUM_GAME_ROWS];
     43a:	ef 71       	andi	r30, 0x1F	; 31
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e9 5d       	subi	r30, 0xD9	; 217
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	60 81       	ld	r22, Z
     444:	fe 01       	movw	r30, r28
     446:	31 96       	adiw	r30, 0x01	; 1
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<=7;i++) {
			if(background_row_data & (1<<i)) {
     44c:	70 e0       	ldi	r23, 0x00	; 0
				// Bit i is set, meaning background is present
				row_display_data[i] = COLOUR_BACKGROUND;
     44e:	91 e2       	ldi	r25, 0x21	; 33
	if(race_row == 0 || race_row == RACE_DISTANCE) {
		draw_start_or_finish_line(row);
	} else {
		uint8_t background_row_data = background_data[race_row % NUM_GAME_ROWS];
		for(i=0;i<=7;i++) {
			if(background_row_data & (1<<i)) {
     450:	ab 01       	movw	r20, r22
     452:	02 2e       	mov	r0, r18
     454:	02 c0       	rjmp	.+4      	; 0x45a <redraw_game_row+0x66>
     456:	55 95       	asr	r21
     458:	47 95       	ror	r20
     45a:	0a 94       	dec	r0
     45c:	e2 f7       	brpl	.-8      	; 0x456 <redraw_game_row+0x62>
     45e:	40 ff       	sbrs	r20, 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <redraw_game_row+0x72>
				// Bit i is set, meaning background is present
				row_display_data[i] = COLOUR_BACKGROUND;
     462:	90 83       	st	Z, r25
     464:	01 c0       	rjmp	.+2      	; 0x468 <redraw_game_row+0x74>
			} else {
				
				row_display_data[i] = COLOUR_BLACK;
     466:	10 82       	st	Z, r1
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	31 96       	adiw	r30, 0x01	; 1
	uint8_t race_row = scroll_position + row;
	if(race_row == 0 || race_row == RACE_DISTANCE) {
		draw_start_or_finish_line(row);
	} else {
		uint8_t background_row_data = background_data[race_row % NUM_GAME_ROWS];
		for(i=0;i<=7;i++) {
     46e:	28 30       	cpi	r18, 0x08	; 8
     470:	31 05       	cpc	r19, r1
     472:	71 f7       	brne	.-36     	; 0x450 <redraw_game_row+0x5c>
				
				row_display_data[i] = COLOUR_BLACK;
			}
			
		}
		ledmatrix_update_column(15 - row, row_display_data);
     474:	be 01       	movw	r22, r28
     476:	6f 5f       	subi	r22, 0xFF	; 255
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	9f e0       	ldi	r25, 0x0F	; 15
     47c:	98 1b       	sub	r25, r24
     47e:	89 2f       	mov	r24, r25
     480:	0e 94 20 04 	call	0x840	; 0x840 <ledmatrix_update_column>
		
	}
}
     484:	60 96       	adiw	r28, 0x10	; 16
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <draw_power_ups>:



void draw_power_ups(){
	uint8_t colour= COLOUR_GREEN;
	switch(random()%4) {
     496:	0e 94 24 0c 	call	0x1848	; 0x1848 <random>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	83 70       	andi	r24, 0x03	; 3
     4a0:	99 27       	eor	r25, r25
     4a2:	aa 27       	eor	r26, r26
     4a4:	b0 78       	andi	r27, 0x80	; 128
     4a6:	bb 23       	and	r27, r27
     4a8:	54 f4       	brge	.+20     	; 0x4be <draw_power_ups+0x28>
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	a1 09       	sbc	r26, r1
     4ae:	b1 09       	sbc	r27, r1
     4b0:	8c 6f       	ori	r24, 0xFC	; 252
     4b2:	9f 6f       	ori	r25, 0xFF	; 255
     4b4:	af 6f       	ori	r26, 0xFF	; 255
     4b6:	bf 6f       	ori	r27, 0xFF	; 255
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	a1 1d       	adc	r26, r1
     4bc:	b1 1d       	adc	r27, r1
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	91 05       	cpc	r25, r1
     4c2:	a1 05       	cpc	r26, r1
     4c4:	b1 05       	cpc	r27, r1
     4c6:	59 f0       	breq	.+22     	; 0x4de <draw_power_ups+0x48>
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	91 05       	cpc	r25, r1
     4cc:	a1 05       	cpc	r26, r1
     4ce:	b1 05       	cpc	r27, r1
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <draw_power_ups+0x4c>
     4d2:	89 2b       	or	r24, r25
     4d4:	8a 2b       	or	r24, r26
     4d6:	8b 2b       	or	r24, r27
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <draw_power_ups+0x50>
}



void draw_power_ups(){
	uint8_t colour= COLOUR_GREEN;
     4da:	40 ef       	ldi	r20, 0xF0	; 240
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <draw_power_ups+0x52>
	switch(random()%4) {
			case 0: colour =(COLOUR_LIGHT_ORANGE); break;
			case 1: colour=(COLOUR_RED); break;
     4de:	4f e0       	ldi	r20, 0x0F	; 15
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <draw_power_ups+0x52>
			case 2: colour=(COLOUR_YELLOW); break;
     4e2:	4f ef       	ldi	r20, 0xFF	; 255
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <draw_power_ups+0x52>


void draw_power_ups(){
	uint8_t colour= COLOUR_GREEN;
	switch(random()%4) {
			case 0: colour =(COLOUR_LIGHT_ORANGE); break;
     4e6:	45 e1       	ldi	r20, 0x15	; 21
			case 1: colour=(COLOUR_RED); break;
			case 2: colour=(COLOUR_YELLOW); break;
			case 3: colour=(COLOUR_GREEN); break;
		}
		if(setting&&(postionx<=15)){
     4e8:	80 91 c1 01 	lds	r24, 0x01C1
     4ec:	88 23       	and	r24, r24
     4ee:	41 f0       	breq	.+16     	; 0x500 <draw_power_ups+0x6a>
     4f0:	80 91 bc 01 	lds	r24, 0x01BC
     4f4:	80 31       	cpi	r24, 0x10	; 16
     4f6:	20 f4       	brcc	.+8      	; 0x500 <draw_power_ups+0x6a>
			ledmatrix_update_pixel(postionx, postiony, colour);
     4f8:	60 91 ba 01 	lds	r22, 0x01BA
     4fc:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
     500:	08 95       	ret

00000502 <activate_power>:

uint32_t start_time, passed_time;
int state = 0;
	

uint8_t activate_power(){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
	uint8_t column =car_column;
     506:	90 91 ad 01 	lds	r25, 0x01AD
	if (setting){
     50a:	80 91 c1 01 	lds	r24, 0x01C1
     50e:	88 23       	and	r24, r24
     510:	f1 f0       	breq	.+60     	; 0x54e <activate_power+0x4c>
	if((postionx==14)||(postionx==13)){
     512:	80 91 bc 01 	lds	r24, 0x01BC
     516:	8d 50       	subi	r24, 0x0D	; 13
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	c8 f4       	brcc	.+50     	; 0x54e <activate_power+0x4c>
		if(postiony==column){
     51c:	80 91 ba 01 	lds	r24, 0x01BA
     520:	89 13       	cpse	r24, r25
     522:	15 c0       	rjmp	.+42     	; 0x54e <activate_power+0x4c>
			state = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 a9 01 	sts	0x01A9, r25
     52c:	80 93 a8 01 	sts	0x01A8, r24
			setting=0;
     530:	10 92 c1 01 	sts	0x01C1, r1
			postionx=16;
     534:	80 e1       	ldi	r24, 0x10	; 16
     536:	80 93 bc 01 	sts	0x01BC, r24
			start_time = get_clock_ticks();
     53a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     53e:	60 93 bd 01 	sts	0x01BD, r22
     542:	70 93 be 01 	sts	0x01BE, r23
     546:	80 93 bf 01 	sts	0x01BF, r24
     54a:	90 93 c0 01 	sts	0x01C0, r25
		}		
	}
	}
	if(state){
     54e:	80 91 a8 01 	lds	r24, 0x01A8
     552:	90 91 a9 01 	lds	r25, 0x01A9
     556:	89 2b       	or	r24, r25
     558:	09 f1       	breq	.+66     	; 0x59c <activate_power+0x9a>
		passed_time = get_clock_ticks();
     55a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     55e:	60 93 c2 01 	sts	0x01C2, r22
     562:	70 93 c3 01 	sts	0x01C3, r23
     566:	80 93 c4 01 	sts	0x01C4, r24
     56a:	90 93 c5 01 	sts	0x01C5, r25
		if(passed_time-start_time>6000){
     56e:	00 91 bd 01 	lds	r16, 0x01BD
     572:	10 91 be 01 	lds	r17, 0x01BE
     576:	20 91 bf 01 	lds	r18, 0x01BF
     57a:	30 91 c0 01 	lds	r19, 0x01C0
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	80 1b       	sub	r24, r16
     584:	91 0b       	sbc	r25, r17
     586:	a2 0b       	sbc	r26, r18
     588:	b3 0b       	sbc	r27, r19
     58a:	81 37       	cpi	r24, 0x71	; 113
     58c:	97 41       	sbci	r25, 0x17	; 23
     58e:	a1 05       	cpc	r26, r1
     590:	b1 05       	cpc	r27, r1
     592:	20 f0       	brcs	.+8      	; 0x59c <activate_power+0x9a>
			state=0;
     594:	10 92 a9 01 	sts	0x01A9, r1
     598:	10 92 a8 01 	sts	0x01A8, r1
			}	
	}
	
	return state;
}
     59c:	80 91 a8 01 	lds	r24, 0x01A8
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <redraw_car>:
}

// Redraw the car in its current position.


static void redraw_car(void) {
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
	uint8_t car_colour = COLOUR_CAR;
	if(car_crashed) {
     5ac:	80 91 ac 01 	lds	r24, 0x01AC
     5b0:	81 11       	cpse	r24, r1
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <redraw_car+0x12>

// Redraw the car in its current position.


static void redraw_car(void) {
	uint8_t car_colour = COLOUR_CAR;
     5b4:	c5 e1       	ldi	r28, 0x15	; 21
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <redraw_car+0x14>
	if(car_crashed) {
		car_colour = COLOUR_CRASH;
     5b8:	cf e0       	ldi	r28, 0x0F	; 15
	}
	if(activate_power()){
     5ba:	0e 94 81 02 	call	0x502	; 0x502 <activate_power>
     5be:	88 23       	and	r24, r24
     5c0:	d1 f0       	breq	.+52     	; 0x5f6 <redraw_car+0x50>
		if(passed_time-start_time<4000){
     5c2:	80 91 c2 01 	lds	r24, 0x01C2
     5c6:	90 91 c3 01 	lds	r25, 0x01C3
     5ca:	a0 91 c4 01 	lds	r26, 0x01C4
     5ce:	b0 91 c5 01 	lds	r27, 0x01C5
     5d2:	00 91 bd 01 	lds	r16, 0x01BD
     5d6:	10 91 be 01 	lds	r17, 0x01BE
     5da:	20 91 bf 01 	lds	r18, 0x01BF
     5de:	30 91 c0 01 	lds	r19, 0x01C0
     5e2:	80 1b       	sub	r24, r16
     5e4:	91 0b       	sbc	r25, r17
     5e6:	a2 0b       	sbc	r26, r18
     5e8:	b3 0b       	sbc	r27, r19
     5ea:	80 3a       	cpi	r24, 0xA0	; 160
     5ec:	9f 40       	sbci	r25, 0x0F	; 15
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	08 f4       	brcc	.+2      	; 0x5f6 <redraw_car+0x50>
			car_colour = COLOUR_YELLOW;
     5f4:	cf ef       	ldi	r28, 0xFF	; 255
			
		}
		
	}
		ledmatrix_update_pixel(15 - CAR_START_ROW, car_column, car_colour);
     5f6:	4c 2f       	mov	r20, r28
     5f8:	60 91 ad 01 	lds	r22, 0x01AD
     5fc:	8e e0       	ldi	r24, 0x0E	; 14
     5fe:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(15 - (CAR_START_ROW+1), car_column, car_colour);
     602:	4c 2f       	mov	r20, r28
     604:	60 91 ad 01 	lds	r22, 0x01AD
     608:	8d e0       	ldi	r24, 0x0D	; 13
     60a:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>

}
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <car_crashes_at>:

// Return 1 if the car crashes if moved into the given column. We compare the car
// position with the background in rows 1 and 2
static uint8_t car_crashes_at(uint8_t column) {
	// Check row 1 at this column
	uint8_t background_row_number = (1 + scroll_position) % NUM_GAME_ROWS;
     616:	20 91 aa 01 	lds	r18, 0x01AA
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	f9 01       	movw	r30, r18
     61e:	31 96       	adiw	r30, 0x01	; 1
     620:	ef 71       	andi	r30, 0x1F	; 31
     622:	f0 78       	andi	r31, 0x80	; 128
	uint8_t background_row_data = background_data[background_row_number];
     624:	ff 27       	eor	r31, r31
     626:	e9 5d       	subi	r30, 0xD9	; 217
     628:	fe 4f       	sbci	r31, 0xFE	; 254
	if(background_row_data & (1<< column)) {
     62a:	40 81       	ld	r20, Z
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	08 2e       	mov	r0, r24
     630:	02 c0       	rjmp	.+4      	; 0x636 <car_crashes_at+0x20>
     632:	55 95       	asr	r21
     634:	47 95       	ror	r20
     636:	0a 94       	dec	r0
     638:	e2 f7       	brpl	.-8      	; 0x632 <car_crashes_at+0x1c>
     63a:	40 ff       	sbrs	r20, 0
     63c:	07 c0       	rjmp	.+14     	; 0x64c <car_crashes_at+0x36>
		// Collision between car and background in row 1
		if (activate_power()){
     63e:	0e 94 81 02 	call	0x502	; 0x502 <activate_power>
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	88 23       	and	r24, r24
     646:	d9 f0       	breq	.+54     	; 0x67e <car_crashes_at+0x68>
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	19 c0       	rjmp	.+50     	; 0x67e <car_crashes_at+0x68>
		} else {
			return 1;
			}
		}
	// Check row 2
	background_row_number = (2 + scroll_position) % NUM_GAME_ROWS;
     64c:	f9 01       	movw	r30, r18
     64e:	32 96       	adiw	r30, 0x02	; 2
     650:	ef 71       	andi	r30, 0x1F	; 31
     652:	f0 78       	andi	r31, 0x80	; 128
	background_row_data = background_data[background_row_number];
     654:	ff 27       	eor	r31, r31
     656:	e9 5d       	subi	r30, 0xD9	; 217
     658:	fe 4f       	sbci	r31, 0xFE	; 254
	if(background_row_data & (1<< column)) {
     65a:	20 81       	ld	r18, Z
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	02 c0       	rjmp	.+4      	; 0x666 <car_crashes_at+0x50>
     662:	55 95       	asr	r21
     664:	47 95       	ror	r20
     666:	8a 95       	dec	r24
     668:	e2 f7       	brpl	.-8      	; 0x662 <car_crashes_at+0x4c>
     66a:	40 ff       	sbrs	r20, 0
     66c:	07 c0       	rjmp	.+14     	; 0x67c <car_crashes_at+0x66>
		// Collision between car and background in row 2
		if (activate_power()){
     66e:	0e 94 81 02 	call	0x502	; 0x502 <activate_power>
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	88 23       	and	r24, r24
     676:	19 f0       	breq	.+6      	; 0x67e <car_crashes_at+0x68>
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	01 c0       	rjmp	.+2      	; 0x67e <car_crashes_at+0x68>
			} else {
			return 1;
		}
	}
	// No collision 
	return 0;
     67c:	90 e0       	ldi	r25, 0x00	; 0
}
     67e:	89 2f       	mov	r24, r25
     680:	08 95       	ret

00000682 <put_car_at_start>:
// Add a car to the game. It is assumed that placing the car in column 3
// will NOT overlap the background.
void put_car_at_start(void) {
	// Initial starting position of car. It must be guaranteed that this
	// initial position does not clash with the background.
	car_column = 3;
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	80 93 ad 01 	sts	0x01AD, r24
	
	// Car is initially alive and hasn't finished
	car_crashed = 0;
     688:	10 92 ac 01 	sts	0x01AC, r1
	lap_finished = 0;
     68c:	10 92 ab 01 	sts	0x01AB, r1
	
	// Show the car
	redraw_car();
     690:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <redraw_car>
     694:	08 95       	ret

00000696 <move_car_left>:
}

void move_car_left(void) {
	if(car_column != 0) {
     696:	80 91 ad 01 	lds	r24, 0x01AD
     69a:	88 23       	and	r24, r24
     69c:	69 f0       	breq	.+26     	; 0x6b8 <move_car_left+0x22>
		// Car not at left hand side
		erase_car();
     69e:	0e 94 ed 01 	call	0x3da	; 0x3da <erase_car>
		car_column--;
     6a2:	80 91 ad 01 	lds	r24, 0x01AD
     6a6:	81 50       	subi	r24, 0x01	; 1
     6a8:	80 93 ad 01 	sts	0x01AD, r24
		
		car_crashed = car_crashes_at(car_column);
     6ac:	0e 94 0b 03 	call	0x616	; 0x616 <car_crashes_at>
     6b0:	80 93 ac 01 	sts	0x01AC, r24
		redraw_car();
     6b4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <redraw_car>
     6b8:	08 95       	ret

000006ba <move_car_right>:
	} // else car is at left hand side (column 0) and can't move left
}

void move_car_right(void) {
	if(car_column != 7) {
     6ba:	80 91 ad 01 	lds	r24, 0x01AD
     6be:	87 30       	cpi	r24, 0x07	; 7
     6c0:	69 f0       	breq	.+26     	; 0x6dc <move_car_right+0x22>
		// Car not at right hand side
		erase_car();
     6c2:	0e 94 ed 01 	call	0x3da	; 0x3da <erase_car>
		car_column++;
     6c6:	80 91 ad 01 	lds	r24, 0x01AD
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 ad 01 	sts	0x01AD, r24
		
		car_crashed = car_crashes_at(car_column);
     6d0:	0e 94 0b 03 	call	0x616	; 0x616 <car_crashes_at>
     6d4:	80 93 ac 01 	sts	0x01AC, r24
		redraw_car();
     6d8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <redraw_car>
     6dc:	08 95       	ret

000006de <has_car_crashed>:
}

uint8_t has_car_crashed(void) {
	
	return car_crashed;
}
     6de:	80 91 ac 01 	lds	r24, 0x01AC
     6e2:	08 95       	ret

000006e4 <has_lap_finished>:

uint8_t has_lap_finished(void) {
	// If the top pixel in the car (two ahead of the scroll position) has
	// reached the finish row then we have crossed the line
	return lap_finished;
}
     6e4:	80 91 ab 01 	lds	r24, 0x01AB
     6e8:	08 95       	ret

000006ea <scroll_background>:

void scroll_background(void) {
	scroll_position++;
     6ea:	80 91 aa 01 	lds	r24, 0x01AA
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 aa 01 	sts	0x01AA, r24
	
	// Check if the lap has finished. We add 2 to the scroll position
	// because we're looking at the front of the car. 
	if(scroll_position + 2 == RACE_DISTANCE) {
     6f4:	8d 37       	cpi	r24, 0x7D	; 125
     6f6:	21 f4       	brne	.+8      	; 0x700 <scroll_background+0x16>
		lap_finished = 1;	
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 ab 01 	sts	0x01AB, r24
     6fe:	06 c0       	rjmp	.+12     	; 0x70c <scroll_background+0x22>
	} else {
		// If we haven't finished the lap, then 
		// check whether the car has crashed or not in its current column
		// (The background may have scrolled into it.)
		car_crashed = car_crashes_at(car_column);
     700:	80 91 ad 01 	lds	r24, 0x01AD
     704:	0e 94 0b 03 	call	0x616	; 0x616 <car_crashes_at>
     708:	80 93 ac 01 	sts	0x01AC, r24
	// LED matrix) and redraw the car and draw the new row 15
	
	
	

	if (postionx<15){
     70c:	80 91 bc 01 	lds	r24, 0x01BC
     710:	8f 30       	cpi	r24, 0x0F	; 15
     712:	28 f4       	brcc	.+10     	; 0x71e <scroll_background+0x34>
		ledmatrix_update_pixel(postionx, postiony, COLOUR_BLACK);
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	60 91 ba 01 	lds	r22, 0x01BA
     71a:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
	}
	
	erase_car();
     71e:	0e 94 ed 01 	call	0x3da	; 0x3da <erase_car>
	ledmatrix_shift_display_right();
     722:	0e 94 43 04 	call	0x886	; 0x886 <ledmatrix_shift_display_right>
	postionx++;
     726:	80 91 bc 01 	lds	r24, 0x01BC
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	80 93 bc 01 	sts	0x01BC, r24
	redraw_car();
     730:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <redraw_car>
	redraw_game_row(15);
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <redraw_game_row>
     73a:	08 95       	ret

0000073c <redraw_background>:
	// No collision 
	return 0;
}

// Clear the screen and redraw the background. The car is not redrawn.
void redraw_background() {
     73c:	cf 93       	push	r28
	// Clear the display
	ledmatrix_clear();
     73e:	0e 94 4a 04 	call	0x894	; 0x894 <ledmatrix_clear>
	
	uint8_t row;
	for(row = 0; row <= 15; row++) {
     742:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_game_row(row);
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <redraw_game_row>
void redraw_background() {
	// Clear the display
	ledmatrix_clear();
	
	uint8_t row;
	for(row = 0; row <= 15; row++) {
     74a:	cf 5f       	subi	r28, 0xFF	; 255
     74c:	c0 31       	cpi	r28, 0x10	; 16
     74e:	d1 f7       	brne	.-12     	; 0x744 <redraw_background+0x8>
		redraw_game_row(row);
	}
}
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <init_game>:
// These functions are defined in the same order as declared in game.h

// Reset the game
void init_game(void) {
	// Initial scroll position
	scroll_position = 0;
     754:	10 92 aa 01 	sts	0x01AA, r1
	
	redraw_background();
     758:	0e 94 9e 03 	call	0x73c	; 0x73c <redraw_background>
	
	// Add a car to the display. (This will redraw the car.)
	put_car_at_start();
     75c:	0e 94 41 03 	call	0x682	; 0x682 <put_car_at_start>
     760:	08 95       	ret

00000762 <Car_Powered>:
	ledmatrix_update_pixel(15 - CAR_START_ROW, car_column, COLOUR_BLACK);
	ledmatrix_update_pixel(15 - (CAR_START_ROW+1), car_column, COLOUR_BLACK);
}

void Car_Powered(){
	if(activate_power()){
     762:	0e 94 81 02 	call	0x502	; 0x502 <activate_power>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <Car_Powered+0xa>
     76a:	4b c0       	rjmp	.+150    	; 0x802 <Car_Powered+0xa0>
		if(passed_time-start_time>4000){
     76c:	80 91 c2 01 	lds	r24, 0x01C2
     770:	90 91 c3 01 	lds	r25, 0x01C3
     774:	a0 91 c4 01 	lds	r26, 0x01C4
     778:	b0 91 c5 01 	lds	r27, 0x01C5
     77c:	40 91 bd 01 	lds	r20, 0x01BD
     780:	50 91 be 01 	lds	r21, 0x01BE
     784:	60 91 bf 01 	lds	r22, 0x01BF
     788:	70 91 c0 01 	lds	r23, 0x01C0
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	a6 0b       	sbc	r26, r22
     792:	b7 0b       	sbc	r27, r23
     794:	81 3a       	cpi	r24, 0xA1	; 161
     796:	9f 40       	sbci	r25, 0x0F	; 15
     798:	a1 05       	cpc	r26, r1
     79a:	b1 05       	cpc	r27, r1
     79c:	90 f1       	brcs	.+100    	; 0x802 <Car_Powered+0xa0>
			switch(random()%2) {
     79e:	0e 94 24 0c 	call	0x1848	; 0x1848 <random>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	99 27       	eor	r25, r25
     7aa:	aa 27       	eor	r26, r26
     7ac:	b0 78       	andi	r27, 0x80	; 128
     7ae:	bb 23       	and	r27, r27
     7b0:	54 f4       	brge	.+20     	; 0x7c6 <Car_Powered+0x64>
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	a1 09       	sbc	r26, r1
     7b6:	b1 09       	sbc	r27, r1
     7b8:	8e 6f       	ori	r24, 0xFE	; 254
     7ba:	9f 6f       	ori	r25, 0xFF	; 255
     7bc:	af 6f       	ori	r26, 0xFF	; 255
     7be:	bf 6f       	ori	r27, 0xFF	; 255
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	a1 1d       	adc	r26, r1
     7c4:	b1 1d       	adc	r27, r1
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	a1 05       	cpc	r26, r1
     7ca:	b1 05       	cpc	r27, r1
     7cc:	29 f0       	breq	.+10     	; 0x7d8 <Car_Powered+0x76>
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	a1 05       	cpc	r26, r1
     7d2:	b1 05       	cpc	r27, r1
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <Car_Powered+0x7e>
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <Car_Powered+0x84>
				case 0: car_colour =(COLOUR_YELLOW); break;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	80 93 bb 01 	sts	0x01BB, r24
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <Car_Powered+0x84>
				case 1: car_colour=(COLOUR_CAR); break;
     7e0:	85 e1       	ldi	r24, 0x15	; 21
     7e2:	80 93 bb 01 	sts	0x01BB, r24
			}
		ledmatrix_update_pixel(15 - CAR_START_ROW, car_column, car_colour);
     7e6:	40 91 bb 01 	lds	r20, 0x01BB
     7ea:	60 91 ad 01 	lds	r22, 0x01AD
     7ee:	8e e0       	ldi	r24, 0x0E	; 14
     7f0:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(15 - (CAR_START_ROW+1), car_column, car_colour);
     7f4:	40 91 bb 01 	lds	r20, 0x01BB
     7f8:	60 91 ad 01 	lds	r22, 0x01AD
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	0e 94 06 04 	call	0x80c	; 0x80c <ledmatrix_update_pixel>
     802:	08 95       	ret

00000804 <ledmatrix_setup>:
#define CMD_CLEAR_SCREEN 0x0F

void ledmatrix_setup(void) {
	// Setup SPI - we divide the clock by 128.
	// (This speed guarantees the SPI buffer will never overflow.)
	spi_setup_master(128);
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <spi_setup_master>
     80a:	08 95       	ret

0000080c <ledmatrix_update_pixel>:
			(void)spi_send_byte(data[x][y]);
		}
	}
}

void ledmatrix_update_pixel(uint8_t x, uint8_t y, PixelColour pixel) {
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	d8 2f       	mov	r29, r24
     814:	16 2f       	mov	r17, r22
     816:	c4 2f       	mov	r28, r20
	(void)spi_send_byte(CMD_UPDATE_PIXEL);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
	(void)spi_send_byte( ((y & 0x07)<<4) | (x & 0x0F));
     81e:	17 70       	andi	r17, 0x07	; 7
     820:	80 e1       	ldi	r24, 0x10	; 16
     822:	18 9f       	mul	r17, r24
     824:	b0 01       	movw	r22, r0
     826:	11 24       	eor	r1, r1
     828:	8d 2f       	mov	r24, r29
     82a:	8f 70       	andi	r24, 0x0F	; 15
     82c:	86 2b       	or	r24, r22
     82e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
	(void)spi_send_byte(pixel);
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	08 95       	ret

00000840 <ledmatrix_update_column>:
	for(uint8_t x = 0; x<MATRIX_NUM_COLUMNS; x++) {
		(void)spi_send_byte(row[x]);
	}
}

void ledmatrix_update_column(uint8_t x, MatrixColumn col) {
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	c8 2f       	mov	r28, r24
     84a:	06 2f       	mov	r16, r22
     84c:	17 2f       	mov	r17, r23
	(void)spi_send_byte(CMD_UPDATE_COL);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
	(void)spi_send_byte(x & 0x0F); // column number
     854:	8c 2f       	mov	r24, r28
     856:	8f 70       	andi	r24, 0x0F	; 15
     858:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
     85c:	c0 2f       	mov	r28, r16
     85e:	d1 2f       	mov	r29, r17
	for(uint8_t y = 0; y<MATRIX_NUM_ROWS; y++) {
     860:	10 e0       	ldi	r17, 0x00	; 0
		(void)spi_send_byte(col[y]);
     862:	89 91       	ld	r24, Y+
     864:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
}

void ledmatrix_update_column(uint8_t x, MatrixColumn col) {
	(void)spi_send_byte(CMD_UPDATE_COL);
	(void)spi_send_byte(x & 0x0F); // column number
	for(uint8_t y = 0; y<MATRIX_NUM_ROWS; y++) {
     868:	1f 5f       	subi	r17, 0xFF	; 255
     86a:	18 30       	cpi	r17, 0x08	; 8
     86c:	d1 f7       	brne	.-12     	; 0x862 <ledmatrix_update_column+0x22>
		(void)spi_send_byte(col[y]);
	}
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <ledmatrix_shift_display_left>:

void ledmatrix_shift_display_left(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
     878:	84 e0       	ldi	r24, 0x04	; 4
     87a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
	(void)spi_send_byte(0x02);
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
     884:	08 95       	ret

00000886 <ledmatrix_shift_display_right>:
}

void ledmatrix_shift_display_right(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
	(void)spi_send_byte(0x01);
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
     892:	08 95       	ret

00000894 <ledmatrix_clear>:
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     894:	8f e0       	ldi	r24, 0x0F	; 15
     896:	0e 94 0b 0b 	call	0x1616	; 0x1616 <spi_send_byte>
     89a:	08 95       	ret

0000089c <init_lap_time>:
}
void init_level_speed(void){
	level_speed = 600;
}
void init_lap_time(void) {
	real_time = get_clock_ticks();
     89c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     8a0:	70 93 c9 01 	sts	0x01C9, r23
     8a4:	60 93 c8 01 	sts	0x01C8, r22
	lap_time = 0;
     8a8:	10 92 d1 01 	sts	0x01D1, r1
     8ac:	10 92 d0 01 	sts	0x01D0, r1
	decimal_time=0;
     8b0:	10 92 cb 01 	sts	0x01CB, r1
     8b4:	10 92 ca 01 	sts	0x01CA, r1
     8b8:	08 95       	ret

000008ba <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     8ba:	0e 94 02 04 	call	0x804	; 0x804 <ledmatrix_setup>
	init_button_interrupts();
     8be:	0e 94 63 01 	call	0x2c6	; 0x2c6 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	7b e4       	ldi	r23, 0x4B	; 75
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <init_serial_stdio>
	
	init_timer0();
     8d0:	0e 94 49 0b 	call	0x1692	; 0x1692 <init_timer0>
	
	// Turn on global interrupts
	sei();
     8d4:	78 94       	sei
     8d6:	08 95       	ret

000008d8 <splash_screen>:
}

void splash_screen(void) {
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 33 0b 	call	0x1666	; 0x1666 <set_display_attribute>
	clear_terminal();
     8de:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     8e2:	0e 94 40 0b 	call	0x1680	; 0x1680 <hide_cursor>
	move_cursor(3,3);
     8e6:	63 e0       	ldi	r22, 0x03	; 3
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("RallyRacer"));
     8ee:	84 e8       	ldi	r24, 0x84	; 132
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	
	move_cursor(3,5);
     8fa:	65 e0       	ldi	r22, 0x05	; 5
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	0e 94 33 0b 	call	0x1666	; 0x1666 <set_display_attribute>
	printf_P(PSTR("CSSE2010/7201 project by Julius Miyumo"));	
     908:	8d e5       	ldi	r24, 0x5D	; 93
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     914:	85 e2       	ldi	r24, 0x25	; 37
     916:	0e 94 33 0b 	call	0x1666	; 0x1666 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     91a:	0e 94 4a 04 	call	0x894	; 0x894 <ledmatrix_clear>
	
	// Orange message the first time through
	set_text_colour(COLOUR_ORANGE);
     91e:	8c e3       	ldi	r24, 0x3C	; 60
     920:	0e 94 c0 08 	call	0x1180	; 0x1180 <set_text_colour>
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("RALLYRACER by 43588701");
     92c:	87 e4       	ldi	r24, 0x47	; 71
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 c3 08 	call	0x1186	; 0x1186 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     934:	0d c0       	rjmp	.+26     	; 0x950 <__stack+0x51>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     936:	2f ef       	ldi	r18, 0xFF	; 255
     938:	80 e7       	ldi	r24, 0x70	; 112
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	80 40       	sbci	r24, 0x00	; 0
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
     944:	00 c0       	rjmp	.+0      	; 0x946 <__stack+0x47>
     946:	00 00       	nop
			_delay_ms(100);
			if(button_pushed() != -1) {
     948:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	e9 f5       	brne	.+122    	; 0x9ca <__stack+0xcb>
	set_text_colour(COLOUR_ORANGE);
	while(1) {
		set_scrolling_display_text("RALLYRACER by 43588701");
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     950:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <scroll_display>
     954:	81 11       	cpse	r24, r1
     956:	ef cf       	rjmp	.-34     	; 0x936 <__stack+0x37>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     958:	0e 94 24 0c 	call	0x1848	; 0x1848 <random>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	83 70       	andi	r24, 0x03	; 3
     962:	99 27       	eor	r25, r25
     964:	aa 27       	eor	r26, r26
     966:	b0 78       	andi	r27, 0x80	; 128
     968:	bb 23       	and	r27, r27
     96a:	54 f4       	brge	.+20     	; 0x980 <__stack+0x81>
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	a1 09       	sbc	r26, r1
     970:	b1 09       	sbc	r27, r1
     972:	8c 6f       	ori	r24, 0xFC	; 252
     974:	9f 6f       	ori	r25, 0xFF	; 255
     976:	af 6f       	ori	r26, 0xFF	; 255
     978:	bf 6f       	ori	r27, 0xFF	; 255
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	91 05       	cpc	r25, r1
     984:	a1 05       	cpc	r26, r1
     986:	b1 05       	cpc	r27, r1
     988:	a1 f0       	breq	.+40     	; 0x9b2 <__stack+0xb3>
     98a:	2c f4       	brge	.+10     	; 0x996 <__stack+0x97>
     98c:	89 2b       	or	r24, r25
     98e:	8a 2b       	or	r24, r26
     990:	8b 2b       	or	r24, r27
     992:	59 f0       	breq	.+22     	; 0x9aa <__stack+0xab>
     994:	cb cf       	rjmp	.-106    	; 0x92c <__stack+0x2d>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	91 05       	cpc	r25, r1
     99a:	a1 05       	cpc	r26, r1
     99c:	b1 05       	cpc	r27, r1
     99e:	69 f0       	breq	.+26     	; 0x9ba <__stack+0xbb>
     9a0:	03 97       	sbiw	r24, 0x03	; 3
     9a2:	a1 05       	cpc	r26, r1
     9a4:	b1 05       	cpc	r27, r1
     9a6:	69 f0       	breq	.+26     	; 0x9c2 <__stack+0xc3>
     9a8:	c1 cf       	rjmp	.-126    	; 0x92c <__stack+0x2d>
			case 0: set_text_colour(COLOUR_LIGHT_ORANGE); break;
     9aa:	85 e1       	ldi	r24, 0x15	; 21
     9ac:	0e 94 c0 08 	call	0x1180	; 0x1180 <set_text_colour>
     9b0:	bd cf       	rjmp	.-134    	; 0x92c <__stack+0x2d>
			case 1: set_text_colour(COLOUR_RED); break;
     9b2:	8f e0       	ldi	r24, 0x0F	; 15
     9b4:	0e 94 c0 08 	call	0x1180	; 0x1180 <set_text_colour>
     9b8:	b9 cf       	rjmp	.-142    	; 0x92c <__stack+0x2d>
			case 2: set_text_colour(COLOUR_YELLOW); break;
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	0e 94 c0 08 	call	0x1180	; 0x1180 <set_text_colour>
     9c0:	b5 cf       	rjmp	.-150    	; 0x92c <__stack+0x2d>
			case 3: set_text_colour(COLOUR_GREEN); break;
     9c2:	80 ef       	ldi	r24, 0xF0	; 240
     9c4:	0e 94 c0 08 	call	0x1180	; 0x1180 <set_text_colour>
     9c8:	b1 cf       	rjmp	.-158    	; 0x92c <__stack+0x2d>
     9ca:	08 95       	ret

000009cc <display_level>:
		}
	}
}

int level=1;
void display_level(){
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	a8 97       	sbiw	r28, 0x28	; 40
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
	char lev_dis[40];
	sprintf(lev_dis, "Level %d", level);
     9e0:	80 91 05 01 	lds	r24, 0x0105
     9e4:	8f 93       	push	r24
     9e6:	80 91 04 01 	lds	r24, 0x0104
     9ea:	8f 93       	push	r24
     9ec:	8e e5       	ldi	r24, 0x5E	; 94
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	0e 94 a6 0c 	call	0x194c	; 0x194c <sprintf>
	reset_display();
     a00:	0e 94 c8 08 	call	0x1190	; 0x1190 <reset_display>
	ledmatrix_clear();
     a04:	0e 94 4a 04 	call	0x894	; 0x894 <ledmatrix_clear>
	if (level<=9){
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	80 91 04 01 	lds	r24, 0x0104
     a18:	90 91 05 01 	lds	r25, 0x0105
     a1c:	0a 97       	sbiw	r24, 0x0a	; 10
     a1e:	2c f4       	brge	.+10     	; 0xa2a <display_level+0x5e>
		set_scrolling_display_text(lev_dis);
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 c3 08 	call	0x1186	; 0x1186 <set_scrolling_display_text>
     a28:	0e c0       	rjmp	.+28     	; 0xa46 <display_level+0x7a>
	}
	else{
		set_scrolling_display_text("You Win");
     a2a:	87 e6       	ldi	r24, 0x67	; 103
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 c3 08 	call	0x1186	; 0x1186 <set_scrolling_display_text>
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <display_level+0x7a>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	86 e7       	ldi	r24, 0x76	; 118
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	90 40       	sbci	r25, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <display_level+0x6e>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <display_level+0x78>
     a44:	00 00       	nop
	}
	
	while(scroll_display()){
     a46:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <scroll_display>
     a4a:	81 11       	cpse	r24, r1
     a4c:	f3 cf       	rjmp	.-26     	; 0xa34 <display_level+0x68>
		_delay_ms(60);
	}
}
     a4e:	a8 96       	adiw	r28, 0x28	; 40
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <Display_Info>:
	_delay_ms(500);
}
	

void Display_Info() {
	move_cursor(3,1);
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf("Level: %d", level); //Level
     a68:	80 91 05 01 	lds	r24, 0x0105
     a6c:	8f 93       	push	r24
     a6e:	80 91 04 01 	lds	r24, 0x0104
     a72:	8f 93       	push	r24
     a74:	8f e6       	ldi	r24, 0x6F	; 111
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <printf>
	move_cursor(3,2);
     a80:	62 e0       	ldi	r22, 0x02	; 2
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf("Lives: %d", number_lives); //life
     a88:	80 91 cd 01 	lds	r24, 0x01CD
     a8c:	8f 93       	push	r24
     a8e:	80 91 cc 01 	lds	r24, 0x01CC
     a92:	8f 93       	push	r24
     a94:	89 e7       	ldi	r24, 0x79	; 121
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <printf>
	move_cursor(3,3);
     aa0:	63 e0       	ldi	r22, 0x03	; 3
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf("Game Score: %d", (int) get_score()); //score
     aa8:	0e 94 b7 08 	call	0x116e	; 0x116e <get_score>
     aac:	7f 93       	push	r23
     aae:	6f 93       	push	r22
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <printf>
	move_cursor(3,4);
     abc:	64 e0       	ldi	r22, 0x04	; 4
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf("Lap Time: %d.%d",  (int) lap_time, (int) decimal_time); //time
     ac4:	80 91 cb 01 	lds	r24, 0x01CB
     ac8:	8f 93       	push	r24
     aca:	80 91 ca 01 	lds	r24, 0x01CA
     ace:	8f 93       	push	r24
     ad0:	80 91 d1 01 	lds	r24, 0x01D1
     ad4:	8f 93       	push	r24
     ad6:	80 91 d0 01 	lds	r24, 0x01D0
     ada:	8f 93       	push	r24
     adc:	82 e9       	ldi	r24, 0x92	; 146
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <printf>
     ae8:	8d b7       	in	r24, 0x3d	; 61
     aea:	9e b7       	in	r25, 0x3e	; 62
     aec:	42 96       	adiw	r24, 0x12	; 18
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	9e bf       	out	0x3e, r25	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	8d bf       	out	0x3d, r24	; 61
     af8:	08 95       	ret

00000afa <handle_lives>:
}
// LED LIGHTS

void handle_lives (void) {
	// Set the pin 0 at port A as output
	DDRA |= (1<<0)|(1<<1)|(1<<2)|(1<<3);
     afa:	81 b1       	in	r24, 0x01	; 1
     afc:	8f 60       	ori	r24, 0x0F	; 15
     afe:	81 b9       	out	0x01, r24	; 1
	if (has_car_crashed()&& number_lives != 0) {
     b00:	0e 94 6f 03 	call	0x6de	; 0x6de <has_car_crashed>
     b04:	88 23       	and	r24, r24
     b06:	59 f0       	breq	.+22     	; 0xb1e <handle_lives+0x24>
     b08:	80 91 cc 01 	lds	r24, 0x01CC
     b0c:	90 91 cd 01 	lds	r25, 0x01CD
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	71 f1       	breq	.+92     	; 0xb70 <handle_lives+0x76>
		number_lives-- ;
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	90 93 cd 01 	sts	0x01CD, r25
     b1a:	80 93 cc 01 	sts	0x01CC, r24
		
	}
		if(number_lives==4){
     b1e:	80 91 cc 01 	lds	r24, 0x01CC
     b22:	90 91 cd 01 	lds	r25, 0x01CD
     b26:	84 30       	cpi	r24, 0x04	; 4
     b28:	91 05       	cpc	r25, r1
     b2a:	21 f4       	brne	.+8      	; 0xb34 <handle_lives+0x3a>
			PORTA |= ((1<<PA3)|(1<<PA2)|(1<<PA1)|(1<<PA0));
     b2c:	82 b1       	in	r24, 0x02	; 2
     b2e:	8f 60       	ori	r24, 0x0F	; 15
     b30:	82 b9       	out	0x02, r24	; 2
     b32:	21 c0       	rjmp	.+66     	; 0xb76 <handle_lives+0x7c>
		}
		else if (number_lives == 3) {
     b34:	83 30       	cpi	r24, 0x03	; 3
     b36:	91 05       	cpc	r25, r1
     b38:	39 f4       	brne	.+14     	; 0xb48 <handle_lives+0x4e>
			PORTA &= ~((1<<PA3)|(1<<PA2)|(1<<PA1)|(1<<PA0));
     b3a:	82 b1       	in	r24, 0x02	; 2
     b3c:	80 7f       	andi	r24, 0xF0	; 240
     b3e:	82 b9       	out	0x02, r24	; 2
			PORTA |= ((1<<PA2)|(1<<PA1)|(1<<PA0));
     b40:	82 b1       	in	r24, 0x02	; 2
     b42:	87 60       	ori	r24, 0x07	; 7
     b44:	82 b9       	out	0x02, r24	; 2
     b46:	17 c0       	rjmp	.+46     	; 0xb76 <handle_lives+0x7c>
		}
		else if (number_lives ==2) {
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	91 05       	cpc	r25, r1
     b4c:	39 f4       	brne	.+14     	; 0xb5c <handle_lives+0x62>
			PORTA &= ~((1<<PA2)|(1<<PA1)|(1<<PA0));
     b4e:	82 b1       	in	r24, 0x02	; 2
     b50:	88 7f       	andi	r24, 0xF8	; 248
     b52:	82 b9       	out	0x02, r24	; 2
			PORTA |= ((1<<PA1)|(1<<PA0));
     b54:	82 b1       	in	r24, 0x02	; 2
     b56:	83 60       	ori	r24, 0x03	; 3
     b58:	82 b9       	out	0x02, r24	; 2
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <handle_lives+0x7c>
		}
		else if (number_lives ==1) {
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	29 f4       	brne	.+10     	; 0xb6c <handle_lives+0x72>
			PORTA &= ~((1<<PA2)|(1<<PA1)|(1<<PA0));
     b62:	82 b1       	in	r24, 0x02	; 2
     b64:	88 7f       	andi	r24, 0xF8	; 248
     b66:	82 b9       	out	0x02, r24	; 2
			PORTA |= (1<<PA0);
     b68:	10 9a       	sbi	0x02, 0	; 2
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <handle_lives+0x7c>
		}
		else if(number_lives ==0) {
     b6c:	89 2b       	or	r24, r25
     b6e:	19 f4       	brne	.+6      	; 0xb76 <handle_lives+0x7c>
			PORTA &= ~((1<<PA2)|(1<<PA1)|(1<<PA0));
     b70:	82 b1       	in	r24, 0x02	; 2
     b72:	88 7f       	andi	r24, 0xF8	; 248
     b74:	82 b9       	out	0x02, r24	; 2
		}

		Display_Info();
     b76:	0e 94 30 05 	call	0xa60	; 0xa60 <Display_Info>
     b7a:	08 95       	ret

00000b7c <handle_game_over>:
}



void handle_game_over() {
	if (number_lives==0){
     b7c:	80 91 cc 01 	lds	r24, 0x01CC
     b80:	90 91 cd 01 	lds	r25, 0x01CD
     b84:	89 2b       	or	r24, r25
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <handle_game_over+0x48>
		
	// Print a message to the terminal. The spaces on the end of the message
	// will ensure the "LAP COMPLETE" message is completely overwritten.
	move_cursor(10,14);
     b88:	6e e0       	ldi	r22, 0x0E	; 14
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("GAME OVER   "));
     b90:	8d ee       	ldi	r24, 0xED	; 237
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	move_cursor(10,15);
     b9c:	6f e0       	ldi	r22, 0x0F	; 15
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     ba4:	8f ec       	ldi	r24, 0xCF	; 207
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	Display_Info();
     bb0:	0e 94 30 05 	call	0xa60	; 0xa60 <Display_Info>
	while(button_pushed() == -1) {
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	e1 f3       	breq	.-8      	; 0xbbc <handle_game_over+0x40>
     bc4:	08 95       	ret

00000bc6 <set_power>:
		; // wait until a button has been pushed
		}
	}
		
}
void set_power(){
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	62 97       	sbiw	r28, 0x12	; 18
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
	uint8_t postions_py[]={2,4,4,2,3,4,2,3,4};
     bda:	89 e0       	ldi	r24, 0x09	; 9
     bdc:	e5 e1       	ldi	r30, 0x15	; 21
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	de 01       	movw	r26, r28
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	01 90       	ld	r0, Z+
     be6:	0d 92       	st	X+, r0
     be8:	8a 95       	dec	r24
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <set_power+0x1e>
	uint8_t postions_px[]={2,4,5,2,3,3,3,3,3};
     bec:	89 e0       	ldi	r24, 0x09	; 9
     bee:	ee e1       	ldi	r30, 0x1E	; 30
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	de 01       	movw	r26, r28
     bf4:	1a 96       	adiw	r26, 0x0a	; 10
     bf6:	01 90       	ld	r0, Z+
     bf8:	0d 92       	st	X+, r0
     bfa:	8a 95       	dec	r24
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <set_power+0x30>
	postionx = postions_px[level-1];
     bfe:	80 91 04 01 	lds	r24, 0x0104
     c02:	90 91 05 01 	lds	r25, 0x0105
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	fe 01       	movw	r30, r28
     c0a:	e8 0f       	add	r30, r24
     c0c:	f9 1f       	adc	r31, r25
     c0e:	22 85       	ldd	r18, Z+10	; 0x0a
     c10:	20 93 bc 01 	sts	0x01BC, r18
	postiony = postions_py[level-1];
     c14:	e1 e0       	ldi	r30, 0x01	; 1
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ec 0f       	add	r30, r28
     c1a:	fd 1f       	adc	r31, r29
     c1c:	e8 0f       	add	r30, r24
     c1e:	f9 1f       	adc	r31, r25
     c20:	80 81       	ld	r24, Z
     c22:	80 93 ba 01 	sts	0x01BA, r24
	
}
     c26:	62 96       	adiw	r28, 0x12	; 18
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <new_game>:
	
	while(scroll_display()){
		_delay_ms(60);
	}
}
void new_game(void) {
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
	level =1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 05 01 	sts	0x0105, r25
     c44:	80 93 04 01 	sts	0x0104, r24
	display_level();
     c48:	0e 94 e6 04 	call	0x9cc	; 0x9cc <display_level>
	// Initialise the game and display
	init_game();
     c4c:	0e 94 aa 03 	call	0x754	; 0x754 <init_game>
int decimal_time;
void init_number_lives(void){
	number_lives = 3;
}
void init_accel(void) {
	accel = 600;
     c50:	c8 e5       	ldi	r28, 0x58	; 88
     c52:	d2 e0       	ldi	r29, 0x02	; 2
     c54:	d0 93 c7 01 	sts	0x01C7, r29
     c58:	c0 93 c6 01 	sts	0x01C6, r28
	level =1;
	display_level();
	// Initialise the game and display
	init_game();
	init_accel();
	init_lap_time();
     c5c:	0e 94 4e 04 	call	0x89c	; 0x89c <init_lap_time>
}
void init_accel(void) {
	accel = 600;
}
void init_level_speed(void){
	level_speed = 600;
     c60:	d0 93 cf 01 	sts	0x01CF, r29
     c64:	c0 93 ce 01 	sts	0x01CE, r28
int accel;
int lap_time;
int real_time;
int decimal_time;
void init_number_lives(void){
	number_lives = 3;
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 cd 01 	sts	0x01CD, r25
     c70:	80 93 cc 01 	sts	0x01CC, r24
	init_game();
	init_accel();
	init_lap_time();
	init_level_speed();
	init_number_lives();
	handle_lives();
     c74:	0e 94 7d 05 	call	0xafa	; 0xafa <handle_lives>
	set_power();
     c78:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <set_power>
	// Clear the serial terminal
	clear_terminal();
     c7c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_terminal>
	
	// Initialise the score
	init_score();
     c80:	0e 94 99 08 	call	0x1132	; 0x1132 <init_score>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     c84:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
	clear_serial_input_buffer();
     c88:	0e 94 49 0a 	call	0x1492	; 0x1492 <clear_serial_input_buffer>
	
	setting = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 c1 01 	sts	0x01C1, r24
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	84 e3       	ldi	r24, 0x34	; 52
     c96:	9c e0       	ldi	r25, 0x0C	; 12
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <new_game+0x60>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <new_game+0x6a>
     ca2:	00 00       	nop
	
	// Delay for half a second
	_delay_ms(500);
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <crash_handle>:
		
			}
}
			
void crash_handle(){
	if (number_lives>0){
     caa:	80 91 cc 01 	lds	r24, 0x01CC
     cae:	90 91 cd 01 	lds	r25, 0x01CD
     cb2:	18 16       	cp	r1, r24
     cb4:	19 06       	cpc	r1, r25
     cb6:	7c f5       	brge	.+94     	; 0xd16 <crash_handle+0x6c>
		init_game();
     cb8:	0e 94 aa 03 	call	0x754	; 0x754 <init_game>
		init_accel();
		accel = level_speed;
     cbc:	80 91 ce 01 	lds	r24, 0x01CE
     cc0:	90 91 cf 01 	lds	r25, 0x01CF
     cc4:	90 93 c7 01 	sts	0x01C7, r25
     cc8:	80 93 c6 01 	sts	0x01C6, r24
		// Clear the crash message 
		move_cursor(10,14);
     ccc:	6e e0       	ldi	r22, 0x0E	; 14
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
		printf_P(PSTR("                      "));
     cd4:	87 e1       	ldi	r24, 0x17	; 23
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
		move_cursor(10,15);
     ce0:	6f e0       	ldi	r22, 0x0F	; 15
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
		printf_P(PSTR("                            "));
     ce8:	8a ef       	ldi	r24, 0xFA	; 250
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
		// Clear a button push or serial input if any are waiting
		// (The cast to void means the return value is ignored.)
		(void)button_pushed();
     cf4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
		clear_serial_input_buffer();
     cf8:	0e 94 49 0a 	call	0x1492	; 0x1492 <clear_serial_input_buffer>
     cfc:	2f ef       	ldi	r18, 0xFF	; 255
     cfe:	84 e3       	ldi	r24, 0x34	; 52
     d00:	9c e0       	ldi	r25, 0x0C	; 12
     d02:	21 50       	subi	r18, 0x01	; 1
     d04:	80 40       	sbci	r24, 0x00	; 0
     d06:	90 40       	sbci	r25, 0x00	; 0
     d08:	e1 f7       	brne	.-8      	; 0xd02 <crash_handle+0x58>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <crash_handle+0x62>
     d0c:	00 00       	nop
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
		
		// Delay for half a second
		_delay_ms(500);
	}
	set_power();
     d16:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <set_power>
     d1a:	08 95       	ret

00000d1c <handle_new_lap>:
	postiony = postions_py[level-1];
	
}

void handle_new_lap() {
	setting = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 c1 01 	sts	0x01C1, r24
	level++;
     d22:	80 91 04 01 	lds	r24, 0x0104
     d26:	90 91 05 01 	lds	r25, 0x0105
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	90 93 05 01 	sts	0x0105, r25
     d30:	80 93 04 01 	sts	0x0104, r24
	if(level<9) {
     d34:	09 97       	sbiw	r24, 0x09	; 9
     d36:	0c f0       	brlt	.+2      	; 0xd3a <handle_new_lap+0x1e>
     d38:	5c c0       	rjmp	.+184    	; 0xdf2 <handle_new_lap+0xd6>
	display_level();
     d3a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <display_level>
	init_accel();
	level_speed -=200;
     d3e:	80 91 ce 01 	lds	r24, 0x01CE
     d42:	90 91 cf 01 	lds	r25, 0x01CF
     d46:	88 5c       	subi	r24, 0xC8	; 200
     d48:	91 09       	sbc	r25, r1
     d4a:	90 93 cf 01 	sts	0x01CF, r25
     d4e:	80 93 ce 01 	sts	0x01CE, r24
	accel =level_speed;
     d52:	90 93 c7 01 	sts	0x01C7, r25
     d56:	80 93 c6 01 	sts	0x01C6, r24
	
	if (number_lives<4){
     d5a:	80 91 cc 01 	lds	r24, 0x01CC
     d5e:	90 91 cd 01 	lds	r25, 0x01CD
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	91 05       	cpc	r25, r1
     d66:	2c f4       	brge	.+10     	; 0xd72 <handle_new_lap+0x56>
		number_lives++;
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	90 93 cd 01 	sts	0x01CD, r25
     d6e:	80 93 cc 01 	sts	0x01CC, r24
	}
	
	move_cursor(10,14);
     d72:	6e e0       	ldi	r22, 0x0E	; 14
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("LAP COMPLETE"));
     d7a:	82 ec       	ldi	r24, 0xC2	; 194
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	move_cursor(10,15);
     d86:	6f e0       	ldi	r22, 0x0F	; 15
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("Press a button to continue"));
     d8e:	87 ea       	ldi	r24, 0xA7	; 167
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9f 93       	push	r25
     d94:	8f 93       	push	r24
     d96:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	
	
	init_game(); // This will need to be changed for multiple lives
     d9a:	0e 94 aa 03 	call	0x754	; 0x754 <init_game>
	move_cursor(10,14);
     d9e:	6e e0       	ldi	r22, 0x0E	; 14
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("            "));
     da6:	8a e9       	ldi	r24, 0x9A	; 154
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
	move_cursor(10,15);
     db2:	6f e0       	ldi	r22, 0x0F	; 15
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
	printf_P(PSTR("                             "));
     dba:	8c e7       	ldi	r24, 0x7C	; 124
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	89 e6       	ldi	r24, 0x69	; 105
     dca:	98 e1       	ldi	r25, 0x18	; 24
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	80 40       	sbci	r24, 0x00	; 0
     dd0:	90 40       	sbci	r25, 0x00	; 0
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <handle_new_lap+0xb0>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <handle_new_lap+0xba>
     dd6:	00 00       	nop
	_delay_ms(1000);
	init_lap_time();
     dd8:	0e 94 4e 04 	call	0x89c	; 0x89c <init_lap_time>
	set_power();
     ddc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <set_power>
     de0:	8d b7       	in	r24, 0x3d	; 61
     de2:	9e b7       	in	r25, 0x3e	; 62
     de4:	08 96       	adiw	r24, 0x08	; 8
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	9e bf       	out	0x3e, r25	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	8d bf       	out	0x3d, r24	; 61
     df0:	08 95       	ret
	} else{
		display_level();
     df2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <display_level>
		new_game();
     df6:	0e 94 1c 06 	call	0xc38	; 0xc38 <new_game>
     dfa:	08 95       	ret

00000dfc <play_game>:
		Display_Info();

}


void play_game(void) {
     dfc:	2f 92       	push	r2
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <play_game+0x26>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the background scrolled.
	current_time = get_clock_ticks();
     e26:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
	last_move_time = current_time;
	
	uint16_t car_moves = 0;
     e2e:	21 2c       	mov	r2, r1
     e30:	31 2c       	mov	r3, r1
void play_game(void) {
	uint8_t paused = 0;
	uint32_t current_time, last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     e32:	19 82       	std	Y+1, r1	; 0x01

}


void play_game(void) {
	uint8_t paused = 0;
     e34:	b1 2c       	mov	r11, r1
     e36:	1f ef       	ldi	r17, 0xFF	; 255
			accel-=100;//if B2 pushed if scrolls faster till 100ms
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		lap_time = ((get_clock_ticks()-real_time)/1000);
     e38:	0f 2e       	mov	r0, r31
     e3a:	f8 ee       	ldi	r31, 0xE8	; 232
     e3c:	cf 2e       	mov	r12, r31
     e3e:	f3 e0       	ldi	r31, 0x03	; 3
     e40:	df 2e       	mov	r13, r31
     e42:	e1 2c       	mov	r14, r1
     e44:	f1 2c       	mov	r15, r1
     e46:	f0 2d       	mov	r31, r0
				TCCR0B=0;
				
			}
			
			continue;
		} else if(paused) {
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	ba 82       	std	Y+2, r11	; 0x02
	current_time = get_clock_ticks();
	last_move_time = current_time;
	
	uint16_t car_moves = 0;
	// We play the game while the car hasn't crashed
		while(!has_car_crashed()) {
     e4c:	32 c1       	rjmp	.+612    	; 0x10b2 <play_game+0x2b6>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     e4e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
     e52:	b8 2e       	mov	r11, r24
		
		if(button == -1) {
     e54:	2f ef       	ldi	r18, 0xFF	; 255
     e56:	82 13       	cpse	r24, r18
     e58:	32 c1       	rjmp	.+612    	; 0x10be <play_game+0x2c2>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     e5a:	0e 94 42 0a 	call	0x1484	; 0x1484 <serial_input_available>
     e5e:	88 23       	and	r24, r24
     e60:	09 f4       	brne	.+2      	; 0xe64 <play_game+0x68>
     e62:	2f c1       	rjmp	.+606    	; 0x10c2 <play_game+0x2c6>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     e64:	ea ee       	ldi	r30, 0xEA	; 234
     e66:	f2 e0       	ldi	r31, 0x02	; 2
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	0e 94 32 0c 	call	0x1864	; 0x1864 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     e70:	f9 81       	ldd	r31, Y+1	; 0x01
     e72:	f1 11       	cpse	r31, r1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <play_game+0x80>
     e76:	8b 31       	cpi	r24, 0x1B	; 27
     e78:	59 f4       	brne	.+22     	; 0xe90 <play_game+0x94>
     e7a:	25 c1       	rjmp	.+586    	; 0x10c6 <play_game+0x2ca>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     e7c:	29 81       	ldd	r18, Y+1	; 0x01
     e7e:	21 30       	cpi	r18, 0x01	; 1
     e80:	19 f4       	brne	.+6      	; 0xe88 <play_game+0x8c>
     e82:	8b 35       	cpi	r24, 0x5B	; 91
     e84:	29 f4       	brne	.+10     	; 0xe90 <play_game+0x94>
     e86:	23 c1       	rjmp	.+582    	; 0x10ce <play_game+0x2d2>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 2) {
     e88:	99 81       	ldd	r25, Y+1	; 0x01
     e8a:	92 30       	cpi	r25, 0x02	; 2
     e8c:	09 f4       	brne	.+2      	; 0xe90 <play_game+0x94>
     e8e:	23 c1       	rjmp	.+582    	; 0x10d6 <play_game+0x2da>
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		if(serial_input=='N' || serial_input=='n') {
     e90:	98 2f       	mov	r25, r24
     e92:	9f 7d       	andi	r25, 0xDF	; 223
     e94:	9e 34       	cpi	r25, 0x4E	; 78
     e96:	21 f4       	brne	.+8      	; 0xea0 <play_game+0xa4>
				new_game();	// new game
     e98:	0e 94 1c 06 	call	0xc38	; 0xc38 <new_game>
     e9c:	09 83       	std	Y+1, r16	; 0x01
     e9e:	4d c0       	rjmp	.+154    	; 0xf3a <play_game+0x13e>
		} else if(serial_input=='P' || serial_input=='p') {
     ea0:	90 35       	cpi	r25, 0x50	; 80
     ea2:	09 f0       	breq	.+2      	; 0xea6 <play_game+0xaa>
     ea4:	1d c1       	rjmp	.+570    	; 0x10e0 <play_game+0x2e4>
			// pause or unpause
			if(paused) {
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	ee 23       	and	r30, r30
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <play_game+0xba>
				
				// unpause
				paused = 0;
				TCCR0B=((1<<CS01)|(1<<CS00));
     eac:	f3 e0       	ldi	r31, 0x03	; 3
     eae:	f5 bd       	out	0x25, r31	; 37
     eb0:	09 83       	std	Y+1, r16	; 0x01
		} else if(serial_input=='P' || serial_input=='p') {
			// pause or unpause
			if(paused) {
				
				// unpause
				paused = 0;
     eb2:	0a 83       	std	Y+2, r16	; 0x02
     eb4:	fe c0       	rjmp	.+508    	; 0x10b2 <play_game+0x2b6>
				
			} else {
				// pause
				
				paused = 1;
				TCCR0B=0;
     eb6:	15 bc       	out	0x25, r1	; 37
     eb8:	09 83       	std	Y+1, r16	; 0x01
				TCCR0B=((1<<CS01)|(1<<CS00));
				
			} else {
				// pause
				
				paused = 1;
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	2a 83       	std	Y+2, r18	; 0x02
     ebe:	f9 c0       	rjmp	.+498    	; 0x10b2 <play_game+0x2b6>
			
			continue;
			
		} 
		
		else if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	b9 16       	cp	r11, r25
     ec4:	31 f0       	breq	.+12     	; 0xed2 <play_game+0xd6>
     ec6:	84 34       	cpi	r24, 0x44	; 68
     ec8:	21 f0       	breq	.+8      	; 0xed2 <play_game+0xd6>
     eca:	91 2f       	mov	r25, r17
     ecc:	9f 7d       	andi	r25, 0xDF	; 223
     ece:	9c 34       	cpi	r25, 0x4C	; 76
     ed0:	31 f4       	brne	.+12     	; 0xede <play_game+0xe2>
			// Attempt to move left
			move_car_left();
     ed2:	0e 94 4b 03 	call	0x696	; 0x696 <move_car_left>
			car_moves++;
     ed6:	ef ef       	ldi	r30, 0xFF	; 255
     ed8:	2e 1a       	sub	r2, r30
     eda:	3e 0a       	sbc	r3, r30
     edc:	2e c0       	rjmp	.+92     	; 0xf3a <play_game+0x13e>
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
     ede:	bb 20       	and	r11, r11
     ee0:	21 f0       	breq	.+8      	; 0xeea <play_game+0xee>
     ee2:	83 34       	cpi	r24, 0x43	; 67
     ee4:	11 f0       	breq	.+4      	; 0xeea <play_game+0xee>
     ee6:	92 35       	cpi	r25, 0x52	; 82
     ee8:	31 f4       	brne	.+12     	; 0xef6 <play_game+0xfa>
			// Attempt to move right
			move_car_right();
     eea:	0e 94 5d 03 	call	0x6ba	; 0x6ba <move_car_right>
			car_moves++;
     eee:	ff ef       	ldi	r31, 0xFF	; 255
     ef0:	2f 1a       	sub	r2, r31
     ef2:	3f 0a       	sbc	r3, r31
     ef4:	22 c0       	rjmp	.+68     	; 0xf3a <play_game+0x13e>
		}
			
			
		else if ((button==1)&&(accel<=1000)){
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	b2 12       	cpse	r11, r18
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <play_game+0x11e>
     efc:	80 91 c6 01 	lds	r24, 0x01C6
     f00:	90 91 c7 01 	lds	r25, 0x01C7
     f04:	89 3e       	cpi	r24, 0xE9	; 233
     f06:	e3 e0       	ldi	r30, 0x03	; 3
     f08:	9e 07       	cpc	r25, r30
     f0a:	bc f4       	brge	.+46     	; 0xf3a <play_game+0x13e>
			accel+=100;
     f0c:	8c 59       	subi	r24, 0x9C	; 156
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	90 93 c7 01 	sts	0x01C7, r25
     f14:	80 93 c6 01 	sts	0x01C6, r24
     f18:	10 c0       	rjmp	.+32     	; 0xf3a <play_game+0x13e>
		}
		else if((button==2)&&(accel>=100)){
     f1a:	f2 e0       	ldi	r31, 0x02	; 2
     f1c:	bf 12       	cpse	r11, r31
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <play_game+0x13e>
     f20:	80 91 c6 01 	lds	r24, 0x01C6
     f24:	90 91 c7 01 	lds	r25, 0x01C7
     f28:	84 36       	cpi	r24, 0x64	; 100
     f2a:	91 05       	cpc	r25, r1
     f2c:	34 f0       	brlt	.+12     	; 0xf3a <play_game+0x13e>
			accel-=100;//if B2 pushed if scrolls faster till 100ms
     f2e:	84 56       	subi	r24, 0x64	; 100
     f30:	91 09       	sbc	r25, r1
     f32:	90 93 c7 01 	sts	0x01C7, r25
     f36:	80 93 c6 01 	sts	0x01C6, r24
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		lap_time = ((get_clock_ticks()-real_time)/1000);
     f3a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     f3e:	20 91 c8 01 	lds	r18, 0x01C8
     f42:	30 91 c9 01 	lds	r19, 0x01C9
     f46:	49 01       	movw	r8, r18
     f48:	aa 24       	eor	r10, r10
     f4a:	97 fc       	sbrc	r9, 7
     f4c:	a0 94       	com	r10
     f4e:	ba 2c       	mov	r11, r10
     f50:	68 19       	sub	r22, r8
     f52:	79 09       	sbc	r23, r9
     f54:	8a 09       	sbc	r24, r10
     f56:	9b 09       	sbc	r25, r11
     f58:	a7 01       	movw	r20, r14
     f5a:	96 01       	movw	r18, r12
     f5c:	0e 94 94 0b 	call	0x1728	; 0x1728 <__udivmodsi4>
     f60:	30 93 d1 01 	sts	0x01D1, r19
     f64:	20 93 d0 01 	sts	0x01D0, r18
		decimal_time = (((get_clock_ticks()-real_time)%1000)/100); // lap time
     f68:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     f6c:	20 91 c8 01 	lds	r18, 0x01C8
     f70:	30 91 c9 01 	lds	r19, 0x01C9
     f74:	49 01       	movw	r8, r18
     f76:	aa 24       	eor	r10, r10
     f78:	97 fc       	sbrc	r9, 7
     f7a:	a0 94       	com	r10
     f7c:	ba 2c       	mov	r11, r10
     f7e:	68 19       	sub	r22, r8
     f80:	79 09       	sbc	r23, r9
     f82:	8a 09       	sbc	r24, r10
     f84:	9b 09       	sbc	r25, r11
     f86:	a7 01       	movw	r20, r14
     f88:	96 01       	movw	r18, r12
     f8a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__udivmodsi4>
     f8e:	24 e6       	ldi	r18, 0x64	; 100
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	0e 94 94 0b 	call	0x1728	; 0x1728 <__udivmodsi4>
     f9a:	30 93 cb 01 	sts	0x01CB, r19
     f9e:	20 93 ca 01 	sts	0x01CA, r18
		Display_Info();
     fa2:	0e 94 30 05 	call	0xa60	; 0xa60 <Display_Info>
		current_time = get_clock_ticks(); 
     fa6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
		if(current_time >= last_move_time + 5){
     faa:	53 01       	movw	r10, r6
     fac:	42 01       	movw	r8, r4
     fae:	25 e0       	ldi	r18, 0x05	; 5
     fb0:	82 0e       	add	r8, r18
     fb2:	91 1c       	adc	r9, r1
     fb4:	a1 1c       	adc	r10, r1
     fb6:	b1 1c       	adc	r11, r1
     fb8:	68 15       	cp	r22, r8
     fba:	79 05       	cpc	r23, r9
     fbc:	8a 05       	cpc	r24, r10
     fbe:	9b 05       	cpc	r25, r11
     fc0:	20 f0       	brcs	.+8      	; 0xfca <play_game+0x1ce>
			draw_power_ups();
     fc2:	0e 94 4b 02 	call	0x496	; 0x496 <draw_power_ups>
			Car_Powered();
     fc6:	0e 94 b1 03 	call	0x762	; 0x762 <Car_Powered>
		}
			
		current_time = get_clock_ticks(); 
     fca:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
     fce:	4b 01       	movw	r8, r22
     fd0:	5c 01       	movw	r10, r24
		

		
		if(!has_car_crashed() && current_time >= last_move_time + accel) {
     fd2:	0e 94 6f 03 	call	0x6de	; 0x6de <has_car_crashed>
     fd6:	81 11       	cpse	r24, r1
     fd8:	3e c0       	rjmp	.+124    	; 0x1056 <play_game+0x25a>
     fda:	80 91 c6 01 	lds	r24, 0x01C6
     fde:	90 91 c7 01 	lds	r25, 0x01C7
     fe2:	aa 27       	eor	r26, r26
     fe4:	97 fd       	sbrc	r25, 7
     fe6:	a0 95       	com	r26
     fe8:	ba 2f       	mov	r27, r26
     fea:	84 0d       	add	r24, r4
     fec:	95 1d       	adc	r25, r5
     fee:	a6 1d       	adc	r26, r6
     ff0:	b7 1d       	adc	r27, r7
     ff2:	88 16       	cp	r8, r24
     ff4:	99 06       	cpc	r9, r25
     ff6:	aa 06       	cpc	r10, r26
     ff8:	bb 06       	cpc	r11, r27
     ffa:	68 f1       	brcs	.+90     	; 0x1056 <play_game+0x25a>
			// 600ms (0.6 second) has passed since the last time we scrolled
			// the background, so scroll it now and check whether that means
			// we've finished the lap. (If a crash occurs we will drop out of
			// the main while loop so we don't need to check for that here.)
			scroll_background();
     ffc:	0e 94 75 03 	call	0x6ea	; 0x6ea <scroll_background>
			
			//Add to score
			if  (car_moves<= 5){
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	28 16       	cp	r2, r24
    1004:	31 04       	cpc	r3, r1
    1006:	30 f4       	brcc	.+12     	; 0x1014 <play_game+0x218>
				add_to_score (5-car_moves);	
    1008:	85 e0       	ldi	r24, 0x05	; 5
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	82 19       	sub	r24, r2
    100e:	93 09       	sbc	r25, r3
    1010:	0e 94 a2 08 	call	0x1144	; 0x1144 <add_to_score>
			}car_moves=0;

			if(has_lap_finished()) {
    1014:	0e 94 72 03 	call	0x6e4	; 0x6e4 <has_lap_finished>
    1018:	88 23       	and	r24, r24
    101a:	c9 f0       	breq	.+50     	; 0x104e <play_game+0x252>
				add_to_score(100);
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 a2 08 	call	0x1144	; 0x1144 <add_to_score>
int decimal_time;
void init_number_lives(void){
	number_lives = 3;
}
void init_accel(void) {
	accel = 600;
    1024:	e8 e5       	ldi	r30, 0x58	; 88
    1026:	f2 e0       	ldi	r31, 0x02	; 2
    1028:	f0 93 c7 01 	sts	0x01C7, r31
    102c:	e0 93 c6 01 	sts	0x01C6, r30
			}car_moves=0;

			if(has_lap_finished()) {
				add_to_score(100);
				init_accel();
				handle_new_lap();
    1030:	0e 94 8e 06 	call	0xd1c	; 0xd1c <handle_new_lap>
				Display_Info();
    1034:	0e 94 30 05 	call	0xa60	; 0xa60 <Display_Info>
				(void)button_pushed();
    1038:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
				clear_serial_input_buffer();
    103c:	0e 94 49 0a 	call	0x1492	; 0x1492 <clear_serial_input_buffer>
				// Pauses until a button is pushed
				// Reset the time of the last scroll
				last_move_time = get_clock_ticks();
    1040:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <get_clock_ticks>
    1044:	2b 01       	movw	r4, r22
    1046:	3c 01       	movw	r6, r24
			scroll_background();
			
			//Add to score
			if  (car_moves<= 5){
				add_to_score (5-car_moves);	
			}car_moves=0;
    1048:	21 2c       	mov	r2, r1
    104a:	31 2c       	mov	r3, r1
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <play_game+0x25a>
				clear_serial_input_buffer();
				// Pauses until a button is pushed
				// Reset the time of the last scroll
				last_move_time = get_clock_ticks();
				} else {
				last_move_time = current_time;
    104e:	24 01       	movw	r4, r8
    1050:	35 01       	movw	r6, r10
			scroll_background();
			
			//Add to score
			if  (car_moves<= 5){
				add_to_score (5-car_moves);	
			}car_moves=0;
    1052:	21 2c       	mov	r2, r1
    1054:	31 2c       	mov	r3, r1
				} else {
				last_move_time = current_time;
			}
		}
		// If we get here the car has crashed.
			handle_lives();
    1056:	0e 94 7d 05 	call	0xafa	; 0xafa <handle_lives>
			if ((number_lives>=1)&& (has_car_crashed())) {
    105a:	80 91 cc 01 	lds	r24, 0x01CC
    105e:	90 91 cd 01 	lds	r25, 0x01CD
    1062:	18 16       	cp	r1, r24
    1064:	19 06       	cpc	r1, r25
    1066:	2c f5       	brge	.+74     	; 0x10b2 <play_game+0x2b6>
    1068:	0e 94 6f 03 	call	0x6de	; 0x6de <has_car_crashed>
    106c:	88 23       	and	r24, r24
    106e:	09 f1       	breq	.+66     	; 0x10b2 <play_game+0x2b6>
				move_cursor(10,14);
    1070:	6e e0       	ldi	r22, 0x0E	; 14
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
				printf_P(PSTR("You crashed     "));
    1078:	8c e4       	ldi	r24, 0x4C	; 76
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	9f 93       	push	r25
    107e:	8f 93       	push	r24
    1080:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
				move_cursor(10,15);
    1084:	6f e0       	ldi	r22, 0x0F	; 15
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	0e 94 11 0b 	call	0x1622	; 0x1622 <move_cursor>
				printf_P(PSTR("Press a button to continue   "));
    108c:	8e e2       	ldi	r24, 0x2E	; 46
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
				TCCR0B=0;
    1098:	15 bc       	out	0x25, r1	; 37
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
				while(1){
					if(button_pushed() != -1) {
    10a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_pushed>
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	e1 f3       	breq	.-8      	; 0x10a2 <play_game+0x2a6>
						TCCR0B=((1<<CS01)|(1<<CS00));
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	85 bd       	out	0x25, r24	; 37
						return;
    10ae:	1f c0       	rjmp	.+62     	; 0x10ee <play_game+0x2f2>
				TCCR0B=0;
				
			}
			
			continue;
		} else if(paused) {
    10b0:	09 83       	std	Y+1, r16	; 0x01
	current_time = get_clock_ticks();
	last_move_time = current_time;
	
	uint16_t car_moves = 0;
	// We play the game while the car hasn't crashed
		while(!has_car_crashed()) {
    10b2:	0e 94 6f 03 	call	0x6de	; 0x6de <has_car_crashed>
    10b6:	88 23       	and	r24, r24
    10b8:	09 f4       	brne	.+2      	; 0x10bc <play_game+0x2c0>
    10ba:	c9 ce       	rjmp	.-622    	; 0xe4e <play_game+0x52>
    10bc:	18 c0       	rjmp	.+48     	; 0x10ee <play_game+0x2f2>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    10be:	81 2f       	mov	r24, r17
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <play_game+0x2dc>
    10c2:	81 2f       	mov	r24, r17
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <play_game+0x2dc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	f9 83       	std	Y+1, r31	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    10ca:	81 2f       	mov	r24, r17
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <play_game+0x2dc>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
					} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    10ce:	22 e0       	ldi	r18, 0x02	; 2
    10d0:	29 83       	std	Y+1, r18	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    10d2:	81 2f       	mov	r24, r17
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <play_game+0x2dc>
					} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
					// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    10d6:	09 83       	std	Y+1, r16	; 0x01
				TCCR0B=0;
				
			}
			
			continue;
		} else if(paused) {
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	91 11       	cpse	r25, r1
    10dc:	ea cf       	rjmp	.-44     	; 0x10b2 <play_game+0x2b6>
    10de:	f0 ce       	rjmp	.-544    	; 0xec0 <play_game+0xc4>
    10e0:	ea 81       	ldd	r30, Y+2	; 0x02
    10e2:	e1 11       	cpse	r30, r1
    10e4:	e5 cf       	rjmp	.-54     	; 0x10b0 <play_game+0x2b4>
    10e6:	98 2f       	mov	r25, r24
    10e8:	09 83       	std	Y+1, r16	; 0x01
    10ea:	81 2f       	mov	r24, r17
    10ec:	ef ce       	rjmp	.-546    	; 0xecc <play_game+0xd0>
				// (The cast to void means the return value is ignored.)
		
				// Delay for half a second
		
			}
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	3f 90       	pop	r3
    1114:	2f 90       	pop	r2
    1116:	08 95       	ret

00001118 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1118:	0e 94 5d 04 	call	0x8ba	; 0x8ba <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    111c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <splash_screen>
	new_game();
    1120:	0e 94 1c 06 	call	0xc38	; 0xc38 <new_game>
	while(1) {
		//handle_lives();
		play_game();
    1124:	0e 94 fe 06 	call	0xdfc	; 0xdfc <play_game>
		crash_handle();
    1128:	0e 94 55 06 	call	0xcaa	; 0xcaa <crash_handle>
		handle_game_over();
    112c:	0e 94 be 05 	call	0xb7c	; 0xb7c <handle_game_over>
    1130:	f9 cf       	rjmp	.-14     	; 0x1124 <main+0xc>

00001132 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    1132:	10 92 d2 01 	sts	0x01D2, r1
    1136:	10 92 d3 01 	sts	0x01D3, r1
    113a:	10 92 d4 01 	sts	0x01D4, r1
    113e:	10 92 d5 01 	sts	0x01D5, r1
    1142:	08 95       	ret

00001144 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1144:	40 91 d2 01 	lds	r20, 0x01D2
    1148:	50 91 d3 01 	lds	r21, 0x01D3
    114c:	60 91 d4 01 	lds	r22, 0x01D4
    1150:	70 91 d5 01 	lds	r23, 0x01D5
    1154:	48 0f       	add	r20, r24
    1156:	59 1f       	adc	r21, r25
    1158:	61 1d       	adc	r22, r1
    115a:	71 1d       	adc	r23, r1
    115c:	40 93 d2 01 	sts	0x01D2, r20
    1160:	50 93 d3 01 	sts	0x01D3, r21
    1164:	60 93 d4 01 	sts	0x01D4, r22
    1168:	70 93 d5 01 	sts	0x01D5, r23
    116c:	08 95       	ret

0000116e <get_score>:
}

uint32_t get_score(void) {
	return score;
    116e:	60 91 d2 01 	lds	r22, 0x01D2
    1172:	70 91 d3 01 	lds	r23, 0x01D3
    1176:	80 91 d4 01 	lds	r24, 0x01D4
    117a:	90 91 d5 01 	lds	r25, 0x01D5
}
    117e:	08 95       	ret

00001180 <set_text_colour>:
static volatile char* next_char_to_display = 0;

/* Set the colour to be used
 */
void set_text_colour(PixelColour c) {
	colour = c;
    1180:	80 93 06 01 	sts	0x0106, r24
    1184:	08 95       	ret

00001186 <set_scrolling_display_text>:
 * pointer not the string it points to, so it is important
 * that the original string not change after this function
 * is called while the string is still being displayed.
 */
void set_scrolling_display_text(char* string_to_display) {
	display_string = string_to_display;
    1186:	90 93 b2 01 	sts	0x01B2, r25
    118a:	80 93 b1 01 	sts	0x01B1, r24
    118e:	08 95       	ret

00001190 <reset_display>:
}

void reset_display(){
	next_col_ptr = 0;
    1190:	10 92 b4 01 	sts	0x01B4, r1
    1194:	10 92 b3 01 	sts	0x01B3, r1
	next_char_to_display = 0;
    1198:	10 92 b0 01 	sts	0x01B0, r1
    119c:	10 92 af 01 	sts	0x01AF, r1
    11a0:	08 95       	ret

000011a2 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	28 97       	sbiw	r28, 0x08	; 8
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    11ba:	e0 91 b3 01 	lds	r30, 0x01B3
    11be:	f0 91 b4 01 	lds	r31, 0x01B4
    11c2:	30 97       	sbiw	r30, 0x00	; 0
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    11c6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    11c8:	10 ff       	sbrs	r17, 0
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    11cc:	10 92 b4 01 	sts	0x01B4, r1
    11d0:	10 92 b3 01 	sts	0x01B3, r1
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11d4:	00 e0       	ldi	r16, 0x00	; 0
    11d6:	6b c0       	rjmp	.+214    	; 0x12ae <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    11d8:	31 96       	adiw	r30, 0x01	; 1
    11da:	f0 93 b4 01 	sts	0x01B4, r31
    11de:	e0 93 b3 01 	sts	0x01B3, r30
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11e2:	00 e0       	ldi	r16, 0x00	; 0
    11e4:	64 c0       	rjmp	.+200    	; 0x12ae <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    11e6:	e0 91 af 01 	lds	r30, 0x01AF
    11ea:	f0 91 b0 01 	lds	r31, 0x01B0
    11ee:	30 97       	sbiw	r30, 0x00	; 0
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <scroll_display+0x52>
    11f2:	49 c0       	rjmp	.+146    	; 0x1286 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    11f4:	cf 01       	movw	r24, r30
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	90 93 b0 01 	sts	0x01B0, r25
    11fc:	80 93 af 01 	sts	0x01AF, r24
    1200:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1202:	e1 11       	cpse	r30, r1
    1204:	0a c0       	rjmp	.+20     	; 0x121a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1206:	10 92 b0 01 	sts	0x01B0, r1
    120a:	10 92 af 01 	sts	0x01AF, r1
			shift_countdown = 16;
    120e:	80 e1       	ldi	r24, 0x10	; 16
    1210:	80 93 ae 01 	sts	0x01AE, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1214:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	4a c0       	rjmp	.+148    	; 0x12ae <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    121a:	8f e9       	ldi	r24, 0x9F	; 159
    121c:	8e 0f       	add	r24, r30
    121e:	8a 31       	cpi	r24, 0x1A	; 26
    1220:	70 f4       	brcc	.+28     	; 0x123e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ef 51       	subi	r30, 0x1F	; 31
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	85 91       	lpm	r24, Z+
    122e:	94 91       	lpm	r25, Z
    1230:	90 93 b4 01 	sts	0x01B4, r25
    1234:	80 93 b3 01 	sts	0x01B3, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1238:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	38 c0       	rjmp	.+112    	; 0x12ae <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    123e:	8f eb       	ldi	r24, 0xBF	; 191
    1240:	8e 0f       	add	r24, r30
    1242:	8a 31       	cpi	r24, 0x1A	; 26
    1244:	70 f4       	brcc	.+28     	; 0x1262 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ef 5d       	subi	r30, 0xDF	; 223
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	85 91       	lpm	r24, Z+
    1252:	94 91       	lpm	r25, Z
    1254:	90 93 b4 01 	sts	0x01B4, r25
    1258:	80 93 b3 01 	sts	0x01B3, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    125c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	26 c0       	rjmp	.+76     	; 0x12ae <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1262:	80 ed       	ldi	r24, 0xD0	; 208
    1264:	8e 0f       	add	r24, r30
    1266:	8a 30       	cpi	r24, 0x0A	; 10
    1268:	00 f5       	brcc	.+64     	; 0x12aa <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	e1 5d       	subi	r30, 0xD1	; 209
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	85 91       	lpm	r24, Z+
    1276:	94 91       	lpm	r25, Z
    1278:	90 93 b4 01 	sts	0x01B4, r25
    127c:	80 93 b3 01 	sts	0x01B3, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1280:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1286:	80 91 b1 01 	lds	r24, 0x01B1
    128a:	90 91 b2 01 	lds	r25, 0x01B2
    128e:	01 e0       	ldi	r16, 0x01	; 1
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	09 f0       	breq	.+2      	; 0x1296 <scroll_display+0xf4>
    1294:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1296:	90 93 b0 01 	sts	0x01B0, r25
    129a:	80 93 af 01 	sts	0x01AF, r24
		display_string = 0;
    129e:	10 92 b2 01 	sts	0x01B2, r1
    12a2:	10 92 b1 01 	sts	0x01B1, r1
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    12aa:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    12ac:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    12ae:	0e 94 3c 04 	call	0x878	; 0x878 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    12b2:	30 91 06 01 	lds	r19, 0x0106
    12b6:	fe 01       	movw	r30, r28
    12b8:	38 96       	adiw	r30, 0x08	; 8
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	21 2f       	mov	r18, r17
    12c0:	22 0f       	add	r18, r18
    12c2:	22 0b       	sbc	r18, r18
    12c4:	23 23       	and	r18, r19
    12c6:	20 83       	st	Z, r18
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
    12c8:	11 0f       	add	r17, r17
    12ca:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    12cc:	e8 17       	cp	r30, r24
    12ce:	f9 07       	cpc	r31, r25
    12d0:	b1 f7       	brne	.-20     	; 0x12be <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    12d2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    12d4:	be 01       	movw	r22, r28
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f e0       	ldi	r24, 0x0F	; 15
    12dc:	0e 94 20 04 	call	0x840	; 0x840 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    12e0:	80 91 ae 01 	lds	r24, 0x01AE
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <scroll_display+0x14c>
		shift_countdown--;
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	80 93 ae 01 	sts	0x01AE, r24
	}
	finished = finished && (shift_countdown == 0);
    12ee:	00 23       	and	r16, r16
    12f0:	39 f0       	breq	.+14     	; 0x1300 <scroll_display+0x15e>
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	80 91 ae 01 	lds	r24, 0x01AE
    12f8:	88 23       	and	r24, r24
    12fa:	19 f0       	breq	.+6      	; 0x1302 <scroll_display+0x160>
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <scroll_display+0x160>
    1300:	90 e0       	ldi	r25, 0x00	; 0
	return !finished;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	91 11       	cpse	r25, r1
    1306:	80 e0       	ldi	r24, 0x00	; 0
}
    1308:	28 96       	adiw	r28, 0x08	; 8
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    131e:	cf 93       	push	r28
    1320:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1322:	8a 30       	cpi	r24, 0x0A	; 10
    1324:	19 f4       	brne	.+6      	; 0x132c <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1326:	8d e0       	ldi	r24, 0x0D	; 13
    1328:	0e 94 8f 09 	call	0x131e	; 0x131e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    132c:	2f b7       	in	r18, 0x3f	; 63
    132e:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1332:	22 23       	and	r18, r18
    1334:	29 f1       	breq	.+74     	; 0x1380 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1336:	90 91 d7 01 	lds	r25, 0x01D7
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	d1 f3       	breq	.-12     	; 0x1332 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    133e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1340:	e0 91 d6 01 	lds	r30, 0x01D6
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	8e 0f       	add	r24, r30
    1348:	80 93 d6 01 	sts	0x01D6, r24
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	e8 52       	subi	r30, 0x28	; 40
    1350:	fe 4f       	sbci	r31, 0xFE	; 254
    1352:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1354:	80 91 d7 01 	lds	r24, 0x01D7
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	80 93 d7 01 	sts	0x01D7, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    135e:	80 91 d6 01 	lds	r24, 0x01D6
    1362:	8f 3f       	cpi	r24, 0xFF	; 255
    1364:	11 f4       	brne	.+4      	; 0x136a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1366:	10 92 d6 01 	sts	0x01D6, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
    136a:	e1 ec       	ldi	r30, 0xC1	; 193
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 62       	ori	r24, 0x20	; 32
    1372:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1374:	22 23       	and	r18, r18
    1376:	39 f0       	breq	.+14     	; 0x1386 <uart_put_char+0x68>
		sei();
    1378:	78 94       	sei
	}
	return 0;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	05 c0       	rjmp	.+10     	; 0x138a <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
}
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    138e:	80 91 e9 02 	lds	r24, 0x02E9
    1392:	88 23       	and	r24, r24
    1394:	e1 f3       	breq	.-8      	; 0x138e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1396:	2f b7       	in	r18, 0x3f	; 63
    1398:	20 78       	andi	r18, 0x80	; 128
	cli();
    139a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    139c:	80 91 d7 02 	lds	r24, 0x02D7
    13a0:	30 91 e9 02 	lds	r19, 0x02E9
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	83 1b       	sub	r24, r19
    13a8:	91 09       	sbc	r25, r1
    13aa:	5a f4       	brpl	.+22     	; 0x13c2 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    13ac:	e0 91 d7 02 	lds	r30, 0x02D7
    13b0:	80 91 e9 02 	lds	r24, 0x02E9
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	e8 1b       	sub	r30, r24
    13b8:	f1 09       	sbc	r31, r1
    13ba:	e8 51       	subi	r30, 0x18	; 24
    13bc:	fd 4f       	sbci	r31, 0xFD	; 253
    13be:	80 81       	ld	r24, Z
    13c0:	0a c0       	rjmp	.+20     	; 0x13d6 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    13c2:	e0 91 d7 02 	lds	r30, 0x02D7
    13c6:	80 91 e9 02 	lds	r24, 0x02E9
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	e8 1b       	sub	r30, r24
    13ce:	f1 09       	sbc	r31, r1
    13d0:	e8 52       	subi	r30, 0x28	; 40
    13d2:	fd 4f       	sbci	r31, 0xFD	; 253
    13d4:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    13d6:	90 91 e9 02 	lds	r25, 0x02E9
    13da:	91 50       	subi	r25, 0x01	; 1
    13dc:	90 93 e9 02 	sts	0x02E9, r25
	if(interrupts_enabled) {
    13e0:	22 23       	and	r18, r18
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <uart_get_char+0x58>
		sei();
    13e4:	78 94       	sei
	}	
	return c;
}
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 95       	ret

000013ea <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    13ea:	10 92 d6 01 	sts	0x01D6, r1
	bytes_in_out_buffer = 0;
    13ee:	10 92 d7 01 	sts	0x01D7, r1
	input_insert_pos = 0;
    13f2:	10 92 d7 02 	sts	0x02D7, r1
	bytes_in_input_buffer = 0;
    13f6:	10 92 e9 02 	sts	0x02E9, r1
	input_overrun = 0;
    13fa:	10 92 e8 02 	sts	0x02E8, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    13fe:	40 93 b5 01 	sts	0x01B5, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	aa 1f       	adc	r26, r26
    140c:	bb 1f       	adc	r27, r27
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	aa 1f       	adc	r26, r26
    1414:	bb 1f       	adc	r27, r27
    1416:	9c 01       	movw	r18, r24
    1418:	ad 01       	movw	r20, r26
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	44 1f       	adc	r20, r20
    1420:	55 1f       	adc	r21, r21
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	72 e1       	ldi	r23, 0x12	; 18
    1426:	8a e7       	ldi	r24, 0x7A	; 122
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__divmodsi4>
    142e:	da 01       	movw	r26, r20
    1430:	c9 01       	movw	r24, r18
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	a1 1d       	adc	r26, r1
    1436:	b1 1d       	adc	r27, r1
    1438:	ac 01       	movw	r20, r24
    143a:	bd 01       	movw	r22, r26
    143c:	22 f4       	brpl	.+8      	; 0x1446 <init_serial_stdio+0x5c>
    143e:	4f 5f       	subi	r20, 0xFF	; 255
    1440:	5f 4f       	sbci	r21, 0xFF	; 255
    1442:	6f 4f       	sbci	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	db 01       	movw	r26, r22
    1448:	ca 01       	movw	r24, r20
    144a:	b5 95       	asr	r27
    144c:	a7 95       	ror	r26
    144e:	97 95       	ror	r25
    1450:	87 95       	ror	r24
    1452:	9c 01       	movw	r18, r24
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	31 09       	sbc	r19, r1
	UBRR0 = ubrr;
    1458:	30 93 c5 00 	sts	0x00C5, r19
    145c:	20 93 c4 00 	sts	0x00C4, r18
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1460:	e1 ec       	ldi	r30, 0xC1	; 193
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1468:	80 81       	ld	r24, Z
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	90 93 ed 02 	sts	0x02ED, r25
    1476:	80 93 ec 02 	sts	0x02EC, r24
	stdin = &myStream;
    147a:	90 93 eb 02 	sts	0x02EB, r25
    147e:	80 93 ea 02 	sts	0x02EA, r24
    1482:	08 95       	ret

00001484 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1484:	90 91 e9 02 	lds	r25, 0x02E9
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	91 11       	cpse	r25, r1
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <serial_input_available+0xc>
    148e:	80 e0       	ldi	r24, 0x00	; 0
}
    1490:	08 95       	ret

00001492 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1492:	10 92 d7 02 	sts	0x02D7, r1
	bytes_in_input_buffer = 0;
    1496:	10 92 e9 02 	sts	0x02E9, r1
    149a:	08 95       	ret

0000149c <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    14b0:	80 91 d7 01 	lds	r24, 0x01D7
    14b4:	88 23       	and	r24, r24
    14b6:	29 f1       	breq	.+74     	; 0x1502 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    14b8:	80 91 d6 01 	lds	r24, 0x01D6
    14bc:	20 91 d7 01 	lds	r18, 0x01D7
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	82 1b       	sub	r24, r18
    14c4:	91 09       	sbc	r25, r1
    14c6:	5a f4       	brpl	.+22     	; 0x14de <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    14c8:	e0 91 d6 01 	lds	r30, 0x01D6
    14cc:	80 91 d7 01 	lds	r24, 0x01D7
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	e8 1b       	sub	r30, r24
    14d4:	f1 09       	sbc	r31, r1
    14d6:	e9 52       	subi	r30, 0x29	; 41
    14d8:	fd 4f       	sbci	r31, 0xFD	; 253
    14da:	80 81       	ld	r24, Z
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    14de:	e0 91 d6 01 	lds	r30, 0x01D6
    14e2:	80 91 d7 01 	lds	r24, 0x01D7
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	e8 1b       	sub	r30, r24
    14ea:	f1 09       	sbc	r31, r1
    14ec:	e8 52       	subi	r30, 0x28	; 40
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	80 81       	ld	r24, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    14f2:	90 91 d7 01 	lds	r25, 0x01D7
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	90 93 d7 01 	sts	0x01D7, r25
		
		/* Output the character via the UART */
		UDR0 = c;
    14fc:	80 93 c6 00 	sts	0x00C6, r24
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1502:	e1 ec       	ldi	r30, 0xC1	; 193
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8f 7d       	andi	r24, 0xDF	; 223
    150a:	80 83       	st	Z, r24
	}
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	cf 93       	push	r28
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1544:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1548:	80 91 b5 01 	lds	r24, 0x01B5
    154c:	88 23       	and	r24, r24
    154e:	49 f0       	breq	.+18     	; 0x1562 <__vector_20+0x42>
    1550:	80 91 d7 01 	lds	r24, 0x01D7
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	29 f0       	breq	.+10     	; 0x1562 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	8c 2f       	mov	r24, r28
    155e:	0e 94 8f 09 	call	0x131e	; 0x131e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1562:	80 91 e9 02 	lds	r24, 0x02E9
    1566:	80 31       	cpi	r24, 0x10	; 16
    1568:	20 f0       	brcs	.+8      	; 0x1572 <__vector_20+0x52>
		input_overrun = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 e8 02 	sts	0x02E8, r24
    1570:	18 c0       	rjmp	.+48     	; 0x15a2 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1572:	cd 30       	cpi	r28, 0x0D	; 13
    1574:	09 f4       	brne	.+2      	; 0x1578 <__vector_20+0x58>
			c = '\n';
    1576:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1578:	e0 91 d7 02 	lds	r30, 0x02D7
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	8e 0f       	add	r24, r30
    1580:	80 93 d7 02 	sts	0x02D7, r24
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	e8 52       	subi	r30, 0x28	; 40
    1588:	fd 4f       	sbci	r31, 0xFD	; 253
    158a:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    158c:	80 91 e9 02 	lds	r24, 0x02E9
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 e9 02 	sts	0x02E9, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1596:	80 91 d7 02 	lds	r24, 0x02D7
    159a:	80 31       	cpi	r24, 0x10	; 16
    159c:	11 f4       	brne	.+4      	; 0x15a2 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    159e:	10 92 d7 02 	sts	0x02D7, r1
		}
	}
}
    15a2:	ff 91       	pop	r31
    15a4:	ef 91       	pop	r30
    15a6:	cf 91       	pop	r28
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    15c6:	94 b1       	in	r25, 0x04	; 4
    15c8:	90 6b       	ori	r25, 0xB0	; 176
    15ca:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    15cc:	2c 9a       	sbi	0x05, 4	; 5
	// from datasheet names for these registers/bits.)
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    15ce:	90 e5       	ldi	r25, 0x50	; 80
    15d0:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    15d2:	88 30       	cpi	r24, 0x08	; 8
    15d4:	21 f0       	breq	.+8      	; 0x15de <spi_setup_master+0x18>
    15d6:	80 32       	cpi	r24, 0x20	; 32
    15d8:	11 f0       	breq	.+4      	; 0x15de <spi_setup_master+0x18>
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	9d bd       	out	0x2d, r25	; 45
			break;
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    15e4:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	69 f0       	breq	.+26     	; 0x1604 <spi_setup_master+0x3e>
    15ea:	28 f4       	brcc	.+10     	; 0x15f6 <spi_setup_master+0x30>
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	71 f0       	breq	.+28     	; 0x160c <spi_setup_master+0x46>
    15f0:	80 31       	cpi	r24, 0x10	; 16
    15f2:	61 f0       	breq	.+24     	; 0x160c <spi_setup_master+0x46>
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <spi_setup_master+0x4c>
    15f6:	80 34       	cpi	r24, 0x40	; 64
    15f8:	29 f0       	breq	.+10     	; 0x1604 <spi_setup_master+0x3e>
    15fa:	80 38       	cpi	r24, 0x80	; 128
    15fc:	51 f4       	brne	.+20     	; 0x1612 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    15fe:	8c b5       	in	r24, 0x2c	; 44
    1600:	81 60       	ori	r24, 0x01	; 1
    1602:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1604:	8c b5       	in	r24, 0x2c	; 44
    1606:	82 60       	ori	r24, 0x02	; 2
    1608:	8c bd       	out	0x2c, r24	; 44
			break;
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    160c:	8c b5       	in	r24, 0x2c	; 44
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1612:	2c 98       	cbi	0x05, 4	; 5
    1614:	08 95       	ret

00001616 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR (SPIF bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR followed by a read of SPDR
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1616:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1618:	0d b4       	in	r0, 0x2d	; 45
    161a:	07 fe       	sbrs	r0, 7
    161c:	fd cf       	rjmp	.-6      	; 0x1618 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    161e:	8e b5       	in	r24, 0x2e	; 46
    1620:	08 95       	ret

00001622 <move_cursor>:

#include "terminalio.h"


void move_cursor(int8_t x, int8_t y) {
    printf_P(PSTR("\x1b[%d;%dH"), y, x);
    1622:	28 2f       	mov	r18, r24
    1624:	33 27       	eor	r19, r19
    1626:	27 fd       	sbrc	r18, 7
    1628:	30 95       	com	r19
    162a:	3f 93       	push	r19
    162c:	8f 93       	push	r24
    162e:	86 2f       	mov	r24, r22
    1630:	99 27       	eor	r25, r25
    1632:	87 fd       	sbrc	r24, 7
    1634:	90 95       	com	r25
    1636:	9f 93       	push	r25
    1638:	6f 93       	push	r22
    163a:	8f e7       	ldi	r24, 0x7F	; 127
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	08 95       	ret

00001654 <clear_terminal>:
void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1654:	8a e7       	ldi	r24, 0x7A	; 122
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	9f 93       	push	r25
    165a:	8f 93       	push	r24
    165c:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	08 95       	ret

00001666 <set_display_attribute>:
void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1666:	1f 92       	push	r1
    1668:	8f 93       	push	r24
    166a:	84 e7       	ldi	r24, 0x74	; 116
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	9f 93       	push	r25
    1670:	8f 93       	push	r24
    1672:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	08 95       	ret

00001680 <hide_cursor>:
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1680:	8d e6       	ldi	r24, 0x6D	; 109
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	9f 93       	push	r25
    1686:	8f 93       	push	r24
    1688:	0e 94 84 0c 	call	0x1908	; 0x1908 <printf_P>
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	08 95       	ret

00001692 <init_timer0>:

void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks = 0L;
    1692:	10 92 b6 01 	sts	0x01B6, r1
    1696:	10 92 b7 01 	sts	0x01B7, r1
    169a:	10 92 b8 01 	sts	0x01B8, r1
    169e:	10 92 b9 01 	sts	0x01B9, r1
	
	/* Clear the timer */
	TCNT0 = 0;
    16a2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124; //sets clock counting every 1ms
    16a4:	8c e7       	ldi	r24, 0x7C	; 124
    16a6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B =  ((1<<CS01)|(1<<CS00));
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    16b0:	ee e6       	ldi	r30, 0x6E	; 110
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	82 60       	ori	r24, 0x02	; 2
    16b8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    16ba:	85 b3       	in	r24, 0x15	; 21
    16bc:	82 70       	andi	r24, 0x02	; 2
    16be:	85 bb       	out	0x15, r24	; 21
    16c0:	08 95       	ret

000016c2 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    16c2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    16c4:	f8 94       	cli
	return_value = clock_ticks;
    16c6:	60 91 b6 01 	lds	r22, 0x01B6
    16ca:	70 91 b7 01 	lds	r23, 0x01B7
    16ce:	80 91 b8 01 	lds	r24, 0x01B8
    16d2:	90 91 b9 01 	lds	r25, 0x01B9
	if(interrupts_on) {
    16d6:	22 23       	and	r18, r18
    16d8:	0c f4       	brge	.+2      	; 0x16dc <get_clock_ticks+0x1a>
		sei();//enables global interrupts
    16da:	78 94       	sei
	}
	return return_value;
}
    16dc:	08 95       	ret

000016de <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    16f0:	80 91 b6 01 	lds	r24, 0x01B6
    16f4:	90 91 b7 01 	lds	r25, 0x01B7
    16f8:	a0 91 b8 01 	lds	r26, 0x01B8
    16fc:	b0 91 b9 01 	lds	r27, 0x01B9
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	a1 1d       	adc	r26, r1
    1704:	b1 1d       	adc	r27, r1
    1706:	80 93 b6 01 	sts	0x01B6, r24
    170a:	90 93 b7 01 	sts	0x01B7, r25
    170e:	a0 93 b8 01 	sts	0x01B8, r26
    1712:	b0 93 b9 01 	sts	0x01B9, r27
	
}
    1716:	bf 91       	pop	r27
    1718:	af 91       	pop	r26
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <__udivmodsi4>:
    1728:	a1 e2       	ldi	r26, 0x21	; 33
    172a:	1a 2e       	mov	r1, r26
    172c:	aa 1b       	sub	r26, r26
    172e:	bb 1b       	sub	r27, r27
    1730:	fd 01       	movw	r30, r26
    1732:	0d c0       	rjmp	.+26     	; 0x174e <__udivmodsi4_ep>

00001734 <__udivmodsi4_loop>:
    1734:	aa 1f       	adc	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	ee 1f       	adc	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	a2 17       	cp	r26, r18
    173e:	b3 07       	cpc	r27, r19
    1740:	e4 07       	cpc	r30, r20
    1742:	f5 07       	cpc	r31, r21
    1744:	20 f0       	brcs	.+8      	; 0x174e <__udivmodsi4_ep>
    1746:	a2 1b       	sub	r26, r18
    1748:	b3 0b       	sbc	r27, r19
    174a:	e4 0b       	sbc	r30, r20
    174c:	f5 0b       	sbc	r31, r21

0000174e <__udivmodsi4_ep>:
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	1a 94       	dec	r1
    1758:	69 f7       	brne	.-38     	; 0x1734 <__udivmodsi4_loop>
    175a:	60 95       	com	r22
    175c:	70 95       	com	r23
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
    1766:	bd 01       	movw	r22, r26
    1768:	cf 01       	movw	r24, r30
    176a:	08 95       	ret

0000176c <__divmodsi4>:
    176c:	05 2e       	mov	r0, r21
    176e:	97 fb       	bst	r25, 7
    1770:	1e f4       	brtc	.+6      	; 0x1778 <__divmodsi4+0xc>
    1772:	00 94       	com	r0
    1774:	0e 94 cd 0b 	call	0x179a	; 0x179a <__negsi2>
    1778:	57 fd       	sbrc	r21, 7
    177a:	07 d0       	rcall	.+14     	; 0x178a <__divmodsi4_neg2>
    177c:	0e 94 94 0b 	call	0x1728	; 0x1728 <__udivmodsi4>
    1780:	07 fc       	sbrc	r0, 7
    1782:	03 d0       	rcall	.+6      	; 0x178a <__divmodsi4_neg2>
    1784:	4e f4       	brtc	.+18     	; 0x1798 <__divmodsi4_exit>
    1786:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__negsi2>

0000178a <__divmodsi4_neg2>:
    178a:	50 95       	com	r21
    178c:	40 95       	com	r20
    178e:	30 95       	com	r19
    1790:	21 95       	neg	r18
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	4f 4f       	sbci	r20, 0xFF	; 255
    1796:	5f 4f       	sbci	r21, 0xFF	; 255

00001798 <__divmodsi4_exit>:
    1798:	08 95       	ret

0000179a <__negsi2>:
    179a:	90 95       	com	r25
    179c:	80 95       	com	r24
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	08 95       	ret

000017aa <do_random>:
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
    17c0:	68 81       	ld	r22, Y
    17c2:	79 81       	ldd	r23, Y+1	; 0x01
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	61 15       	cp	r22, r1
    17ca:	71 05       	cpc	r23, r1
    17cc:	81 05       	cpc	r24, r1
    17ce:	91 05       	cpc	r25, r1
    17d0:	21 f4       	brne	.+8      	; 0x17da <do_random+0x30>
    17d2:	64 e2       	ldi	r22, 0x24	; 36
    17d4:	79 ed       	ldi	r23, 0xD9	; 217
    17d6:	8b e5       	ldi	r24, 0x5B	; 91
    17d8:	97 e0       	ldi	r25, 0x07	; 7
    17da:	2d e1       	ldi	r18, 0x1D	; 29
    17dc:	33 ef       	ldi	r19, 0xF3	; 243
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	0e 94 b6 0b 	call	0x176c	; 0x176c <__divmodsi4>
    17e6:	49 01       	movw	r8, r18
    17e8:	5a 01       	movw	r10, r20
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	a7 ea       	ldi	r26, 0xA7	; 167
    17f0:	b1 e4       	ldi	r27, 0x41	; 65
    17f2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__muluhisi3>
    17f6:	6b 01       	movw	r12, r22
    17f8:	7c 01       	movw	r14, r24
    17fa:	ac ee       	ldi	r26, 0xEC	; 236
    17fc:	b4 ef       	ldi	r27, 0xF4	; 244
    17fe:	a5 01       	movw	r20, r10
    1800:	94 01       	movw	r18, r8
    1802:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__mulohisi3>
    1806:	c6 0e       	add	r12, r22
    1808:	d7 1e       	adc	r13, r23
    180a:	e8 1e       	adc	r14, r24
    180c:	f9 1e       	adc	r15, r25
    180e:	f7 fe       	sbrs	r15, 7
    1810:	06 c0       	rjmp	.+12     	; 0x181e <do_random+0x74>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	c8 1a       	sub	r12, r24
    1816:	d1 08       	sbc	r13, r1
    1818:	e1 08       	sbc	r14, r1
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	f8 0a       	sbc	r15, r24
    181e:	c8 82       	st	Y, r12
    1820:	d9 82       	std	Y+1, r13	; 0x01
    1822:	ea 82       	std	Y+2, r14	; 0x02
    1824:	fb 82       	std	Y+3, r15	; 0x03
    1826:	c7 01       	movw	r24, r14
    1828:	b6 01       	movw	r22, r12
    182a:	9f 77       	andi	r25, 0x7F	; 127
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	08 95       	ret

00001842 <random_r>:
    1842:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <do_random>
    1846:	08 95       	ret

00001848 <random>:
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <do_random>
    1850:	08 95       	ret

00001852 <srandom>:
    1852:	60 93 00 01 	sts	0x0100, r22
    1856:	70 93 01 01 	sts	0x0101, r23
    185a:	80 93 02 01 	sts	0x0102, r24
    185e:	90 93 03 01 	sts	0x0103, r25
    1862:	08 95       	ret

00001864 <fgetc>:
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	ec 01       	movw	r28, r24
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	20 ff       	sbrs	r18, 0
    186e:	33 c0       	rjmp	.+102    	; 0x18d6 <fgetc+0x72>
    1870:	26 ff       	sbrs	r18, 6
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <fgetc+0x24>
    1874:	2f 7b       	andi	r18, 0xBF	; 191
    1876:	2b 83       	std	Y+3, r18	; 0x03
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	9f 81       	ldd	r25, Y+7	; 0x07
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	9f 83       	std	Y+7, r25	; 0x07
    1880:	8e 83       	std	Y+6, r24	; 0x06
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	29 c0       	rjmp	.+82     	; 0x18da <fgetc+0x76>
    1888:	22 ff       	sbrs	r18, 2
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <fgetc+0x46>
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	80 81       	ld	r24, Z
    1892:	99 27       	eor	r25, r25
    1894:	87 fd       	sbrc	r24, 7
    1896:	90 95       	com	r25
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	19 f4       	brne	.+6      	; 0x18a2 <fgetc+0x3e>
    189c:	20 62       	ori	r18, 0x20	; 32
    189e:	2b 83       	std	Y+3, r18	; 0x03
    18a0:	1a c0       	rjmp	.+52     	; 0x18d6 <fgetc+0x72>
    18a2:	31 96       	adiw	r30, 0x01	; 1
    18a4:	f9 83       	std	Y+1, r31	; 0x01
    18a6:	e8 83       	st	Y, r30
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <fgetc+0x62>
    18aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    18ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    18ae:	09 95       	icall
    18b0:	97 ff       	sbrs	r25, 7
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <fgetc+0x62>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	11 f4       	brne	.+4      	; 0x18be <fgetc+0x5a>
    18ba:	80 e1       	ldi	r24, 0x10	; 16
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <fgetc+0x5c>
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	82 2b       	or	r24, r18
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <fgetc+0x72>
    18c6:	2e 81       	ldd	r18, Y+6	; 0x06
    18c8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ca:	2f 5f       	subi	r18, 0xFF	; 255
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	3f 83       	std	Y+7, r19	; 0x07
    18d0:	2e 83       	std	Y+6, r18	; 0x06
    18d2:	99 27       	eor	r25, r25
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <fgetc+0x76>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <printf>:
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e6 e7       	ldi	r30, 0x76	; 118
    18e6:	fc e0       	ldi	r31, 0x0C	; 12
    18e8:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x20>
    18ec:	fe 01       	movw	r30, r28
    18ee:	35 96       	adiw	r30, 0x05	; 5
    18f0:	61 91       	ld	r22, Z+
    18f2:	71 91       	ld	r23, Z+
    18f4:	af 01       	movw	r20, r30
    18f6:	80 91 ec 02 	lds	r24, 0x02EC
    18fa:	90 91 ed 02 	lds	r25, 0x02ED
    18fe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <vfprintf>
    1902:	e2 e0       	ldi	r30, 0x02	; 2
    1904:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x20>

00001908 <printf_P>:
    1908:	a0 e0       	ldi	r26, 0x00	; 0
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ea e8       	ldi	r30, 0x8A	; 138
    190e:	fc e0       	ldi	r31, 0x0C	; 12
    1910:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__+0x1c>
    1914:	fe 01       	movw	r30, r28
    1916:	37 96       	adiw	r30, 0x07	; 7
    1918:	61 91       	ld	r22, Z+
    191a:	71 91       	ld	r23, Z+
    191c:	0c ee       	ldi	r16, 0xEC	; 236
    191e:	12 e0       	ldi	r17, 0x02	; 2
    1920:	d8 01       	movw	r26, r16
    1922:	8d 91       	ld	r24, X+
    1924:	9c 91       	ld	r25, X
    1926:	dc 01       	movw	r26, r24
    1928:	13 96       	adiw	r26, 0x03	; 3
    192a:	2c 91       	ld	r18, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	28 60       	ori	r18, 0x08	; 8
    1930:	13 96       	adiw	r26, 0x03	; 3
    1932:	2c 93       	st	X, r18
    1934:	af 01       	movw	r20, r30
    1936:	0e 94 c8 0c 	call	0x1990	; 0x1990 <vfprintf>
    193a:	d8 01       	movw	r26, r16
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	23 81       	ldd	r18, Z+3	; 0x03
    1942:	27 7f       	andi	r18, 0xF7	; 247
    1944:	23 83       	std	Z+3, r18	; 0x03
    1946:	e4 e0       	ldi	r30, 0x04	; 4
    1948:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__epilogue_restores__+0x1c>

0000194c <sprintf>:
    194c:	ae e0       	ldi	r26, 0x0E	; 14
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ec ea       	ldi	r30, 0xAC	; 172
    1952:	fc e0       	ldi	r31, 0x0C	; 12
    1954:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__+0x1c>
    1958:	0d 89       	ldd	r16, Y+21	; 0x15
    195a:	1e 89       	ldd	r17, Y+22	; 0x16
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	8c 83       	std	Y+4, r24	; 0x04
    1960:	1a 83       	std	Y+2, r17	; 0x02
    1962:	09 83       	std	Y+1, r16	; 0x01
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9f e7       	ldi	r25, 0x7F	; 127
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	ae 01       	movw	r20, r28
    196e:	47 5e       	subi	r20, 0xE7	; 231
    1970:	5f 4f       	sbci	r21, 0xFF	; 255
    1972:	6f 89       	ldd	r22, Y+23	; 0x17
    1974:	78 8d       	ldd	r23, Y+24	; 0x18
    1976:	ce 01       	movw	r24, r28
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <vfprintf>
    197e:	ef 81       	ldd	r30, Y+7	; 0x07
    1980:	f8 85       	ldd	r31, Y+8	; 0x08
    1982:	e0 0f       	add	r30, r16
    1984:	f1 1f       	adc	r31, r17
    1986:	10 82       	st	Z, r1
    1988:	2e 96       	adiw	r28, 0x0e	; 14
    198a:	e4 e0       	ldi	r30, 0x04	; 4
    198c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__epilogue_restores__+0x1c>

00001990 <vfprintf>:
    1990:	ac e0       	ldi	r26, 0x0C	; 12
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ee ec       	ldi	r30, 0xCE	; 206
    1996:	fc e0       	ldi	r31, 0x0C	; 12
    1998:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__>
    199c:	7c 01       	movw	r14, r24
    199e:	6b 01       	movw	r12, r22
    19a0:	8a 01       	movw	r16, r20
    19a2:	fc 01       	movw	r30, r24
    19a4:	17 82       	std	Z+7, r1	; 0x07
    19a6:	16 82       	std	Z+6, r1	; 0x06
    19a8:	83 81       	ldd	r24, Z+3	; 0x03
    19aa:	81 ff       	sbrs	r24, 1
    19ac:	bd c1       	rjmp	.+890    	; 0x1d28 <vfprintf+0x398>
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	4c 01       	movw	r8, r24
    19b4:	f7 01       	movw	r30, r14
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	f6 01       	movw	r30, r12
    19ba:	93 fd       	sbrc	r25, 3
    19bc:	85 91       	lpm	r24, Z+
    19be:	93 ff       	sbrs	r25, 3
    19c0:	81 91       	ld	r24, Z+
    19c2:	6f 01       	movw	r12, r30
    19c4:	88 23       	and	r24, r24
    19c6:	09 f4       	brne	.+2      	; 0x19ca <vfprintf+0x3a>
    19c8:	ab c1       	rjmp	.+854    	; 0x1d20 <vfprintf+0x390>
    19ca:	85 32       	cpi	r24, 0x25	; 37
    19cc:	39 f4       	brne	.+14     	; 0x19dc <vfprintf+0x4c>
    19ce:	93 fd       	sbrc	r25, 3
    19d0:	85 91       	lpm	r24, Z+
    19d2:	93 ff       	sbrs	r25, 3
    19d4:	81 91       	ld	r24, Z+
    19d6:	6f 01       	movw	r12, r30
    19d8:	85 32       	cpi	r24, 0x25	; 37
    19da:	29 f4       	brne	.+10     	; 0x19e6 <vfprintf+0x56>
    19dc:	b7 01       	movw	r22, r14
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    19e4:	e7 cf       	rjmp	.-50     	; 0x19b4 <vfprintf+0x24>
    19e6:	51 2c       	mov	r5, r1
    19e8:	31 2c       	mov	r3, r1
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	20 32       	cpi	r18, 0x20	; 32
    19ee:	a0 f4       	brcc	.+40     	; 0x1a18 <vfprintf+0x88>
    19f0:	8b 32       	cpi	r24, 0x2B	; 43
    19f2:	69 f0       	breq	.+26     	; 0x1a0e <vfprintf+0x7e>
    19f4:	30 f4       	brcc	.+12     	; 0x1a02 <vfprintf+0x72>
    19f6:	80 32       	cpi	r24, 0x20	; 32
    19f8:	59 f0       	breq	.+22     	; 0x1a10 <vfprintf+0x80>
    19fa:	83 32       	cpi	r24, 0x23	; 35
    19fc:	69 f4       	brne	.+26     	; 0x1a18 <vfprintf+0x88>
    19fe:	20 61       	ori	r18, 0x10	; 16
    1a00:	2c c0       	rjmp	.+88     	; 0x1a5a <vfprintf+0xca>
    1a02:	8d 32       	cpi	r24, 0x2D	; 45
    1a04:	39 f0       	breq	.+14     	; 0x1a14 <vfprintf+0x84>
    1a06:	80 33       	cpi	r24, 0x30	; 48
    1a08:	39 f4       	brne	.+14     	; 0x1a18 <vfprintf+0x88>
    1a0a:	21 60       	ori	r18, 0x01	; 1
    1a0c:	26 c0       	rjmp	.+76     	; 0x1a5a <vfprintf+0xca>
    1a0e:	22 60       	ori	r18, 0x02	; 2
    1a10:	24 60       	ori	r18, 0x04	; 4
    1a12:	23 c0       	rjmp	.+70     	; 0x1a5a <vfprintf+0xca>
    1a14:	28 60       	ori	r18, 0x08	; 8
    1a16:	21 c0       	rjmp	.+66     	; 0x1a5a <vfprintf+0xca>
    1a18:	27 fd       	sbrc	r18, 7
    1a1a:	27 c0       	rjmp	.+78     	; 0x1a6a <vfprintf+0xda>
    1a1c:	30 ed       	ldi	r19, 0xD0	; 208
    1a1e:	38 0f       	add	r19, r24
    1a20:	3a 30       	cpi	r19, 0x0A	; 10
    1a22:	78 f4       	brcc	.+30     	; 0x1a42 <vfprintf+0xb2>
    1a24:	26 ff       	sbrs	r18, 6
    1a26:	06 c0       	rjmp	.+12     	; 0x1a34 <vfprintf+0xa4>
    1a28:	fa e0       	ldi	r31, 0x0A	; 10
    1a2a:	5f 9e       	mul	r5, r31
    1a2c:	30 0d       	add	r19, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	53 2e       	mov	r5, r19
    1a32:	13 c0       	rjmp	.+38     	; 0x1a5a <vfprintf+0xca>
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	38 9e       	mul	r3, r24
    1a38:	30 0d       	add	r19, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	33 2e       	mov	r3, r19
    1a3e:	20 62       	ori	r18, 0x20	; 32
    1a40:	0c c0       	rjmp	.+24     	; 0x1a5a <vfprintf+0xca>
    1a42:	8e 32       	cpi	r24, 0x2E	; 46
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <vfprintf+0xbe>
    1a46:	26 fd       	sbrc	r18, 6
    1a48:	6b c1       	rjmp	.+726    	; 0x1d20 <vfprintf+0x390>
    1a4a:	20 64       	ori	r18, 0x40	; 64
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <vfprintf+0xca>
    1a4e:	8c 36       	cpi	r24, 0x6C	; 108
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <vfprintf+0xc6>
    1a52:	20 68       	ori	r18, 0x80	; 128
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <vfprintf+0xca>
    1a56:	88 36       	cpi	r24, 0x68	; 104
    1a58:	41 f4       	brne	.+16     	; 0x1a6a <vfprintf+0xda>
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	93 fd       	sbrc	r25, 3
    1a5e:	85 91       	lpm	r24, Z+
    1a60:	93 ff       	sbrs	r25, 3
    1a62:	81 91       	ld	r24, Z+
    1a64:	6f 01       	movw	r12, r30
    1a66:	81 11       	cpse	r24, r1
    1a68:	c1 cf       	rjmp	.-126    	; 0x19ec <vfprintf+0x5c>
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	9f 7d       	andi	r25, 0xDF	; 223
    1a6e:	95 54       	subi	r25, 0x45	; 69
    1a70:	93 30       	cpi	r25, 0x03	; 3
    1a72:	28 f4       	brcc	.+10     	; 0x1a7e <vfprintf+0xee>
    1a74:	0c 5f       	subi	r16, 0xFC	; 252
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	ff e3       	ldi	r31, 0x3F	; 63
    1a7a:	f9 83       	std	Y+1, r31	; 0x01
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <vfprintf+0x108>
    1a7e:	83 36       	cpi	r24, 0x63	; 99
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <vfprintf+0xfe>
    1a82:	83 37       	cpi	r24, 0x73	; 115
    1a84:	71 f0       	breq	.+28     	; 0x1aa2 <vfprintf+0x112>
    1a86:	83 35       	cpi	r24, 0x53	; 83
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <vfprintf+0xfc>
    1a8a:	5b c0       	rjmp	.+182    	; 0x1b42 <vfprintf+0x1b2>
    1a8c:	22 c0       	rjmp	.+68     	; 0x1ad2 <vfprintf+0x142>
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 81       	ld	r24, Z
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	0e 5f       	subi	r16, 0xFE	; 254
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	44 24       	eor	r4, r4
    1a9a:	43 94       	inc	r4
    1a9c:	51 2c       	mov	r5, r1
    1a9e:	54 01       	movw	r10, r8
    1aa0:	15 c0       	rjmp	.+42     	; 0x1acc <vfprintf+0x13c>
    1aa2:	38 01       	movw	r6, r16
    1aa4:	f2 e0       	ldi	r31, 0x02	; 2
    1aa6:	6f 0e       	add	r6, r31
    1aa8:	71 1c       	adc	r7, r1
    1aaa:	f8 01       	movw	r30, r16
    1aac:	a0 80       	ld	r10, Z
    1aae:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab0:	26 ff       	sbrs	r18, 6
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <vfprintf+0x12a>
    1ab4:	65 2d       	mov	r22, r5
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <vfprintf+0x12e>
    1aba:	6f ef       	ldi	r22, 0xFF	; 255
    1abc:	7f ef       	ldi	r23, 0xFF	; 255
    1abe:	c5 01       	movw	r24, r10
    1ac0:	2c 87       	std	Y+12, r18	; 0x0c
    1ac2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <strnlen>
    1ac6:	2c 01       	movw	r4, r24
    1ac8:	83 01       	movw	r16, r6
    1aca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1acc:	2f 77       	andi	r18, 0x7F	; 127
    1ace:	22 2e       	mov	r2, r18
    1ad0:	17 c0       	rjmp	.+46     	; 0x1b00 <vfprintf+0x170>
    1ad2:	38 01       	movw	r6, r16
    1ad4:	f2 e0       	ldi	r31, 0x02	; 2
    1ad6:	6f 0e       	add	r6, r31
    1ad8:	71 1c       	adc	r7, r1
    1ada:	f8 01       	movw	r30, r16
    1adc:	a0 80       	ld	r10, Z
    1ade:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae0:	26 ff       	sbrs	r18, 6
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <vfprintf+0x15a>
    1ae4:	65 2d       	mov	r22, r5
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <vfprintf+0x15e>
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f ef       	ldi	r23, 0xFF	; 255
    1aee:	c5 01       	movw	r24, r10
    1af0:	2c 87       	std	Y+12, r18	; 0x0c
    1af2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <strnlen_P>
    1af6:	2c 01       	movw	r4, r24
    1af8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1afa:	20 68       	ori	r18, 0x80	; 128
    1afc:	22 2e       	mov	r2, r18
    1afe:	83 01       	movw	r16, r6
    1b00:	23 fc       	sbrc	r2, 3
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <vfprintf+0x1aa>
    1b04:	83 2d       	mov	r24, r3
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	48 16       	cp	r4, r24
    1b0a:	59 06       	cpc	r5, r25
    1b0c:	b0 f4       	brcc	.+44     	; 0x1b3a <vfprintf+0x1aa>
    1b0e:	b7 01       	movw	r22, r14
    1b10:	80 e2       	ldi	r24, 0x20	; 32
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1b18:	3a 94       	dec	r3
    1b1a:	f4 cf       	rjmp	.-24     	; 0x1b04 <vfprintf+0x174>
    1b1c:	f5 01       	movw	r30, r10
    1b1e:	27 fc       	sbrc	r2, 7
    1b20:	85 91       	lpm	r24, Z+
    1b22:	27 fe       	sbrs	r2, 7
    1b24:	81 91       	ld	r24, Z+
    1b26:	5f 01       	movw	r10, r30
    1b28:	b7 01       	movw	r22, r14
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1b30:	31 10       	cpse	r3, r1
    1b32:	3a 94       	dec	r3
    1b34:	f1 e0       	ldi	r31, 0x01	; 1
    1b36:	4f 1a       	sub	r4, r31
    1b38:	51 08       	sbc	r5, r1
    1b3a:	41 14       	cp	r4, r1
    1b3c:	51 04       	cpc	r5, r1
    1b3e:	71 f7       	brne	.-36     	; 0x1b1c <vfprintf+0x18c>
    1b40:	e5 c0       	rjmp	.+458    	; 0x1d0c <vfprintf+0x37c>
    1b42:	84 36       	cpi	r24, 0x64	; 100
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <vfprintf+0x1ba>
    1b46:	89 36       	cpi	r24, 0x69	; 105
    1b48:	39 f5       	brne	.+78     	; 0x1b98 <vfprintf+0x208>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	27 ff       	sbrs	r18, 7
    1b4e:	07 c0       	rjmp	.+14     	; 0x1b5e <vfprintf+0x1ce>
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	0c 5f       	subi	r16, 0xFC	; 252
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	08 c0       	rjmp	.+16     	; 0x1b6e <vfprintf+0x1de>
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	88 27       	eor	r24, r24
    1b64:	77 fd       	sbrc	r23, 7
    1b66:	80 95       	com	r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	0e 5f       	subi	r16, 0xFE	; 254
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	2f 76       	andi	r18, 0x6F	; 111
    1b70:	b2 2e       	mov	r11, r18
    1b72:	97 ff       	sbrs	r25, 7
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <vfprintf+0x1f8>
    1b76:	90 95       	com	r25
    1b78:	80 95       	com	r24
    1b7a:	70 95       	com	r23
    1b7c:	61 95       	neg	r22
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	8f 4f       	sbci	r24, 0xFF	; 255
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	20 68       	ori	r18, 0x80	; 128
    1b86:	b2 2e       	mov	r11, r18
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	a4 01       	movw	r20, r8
    1b8e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__ultoa_invert>
    1b92:	a8 2e       	mov	r10, r24
    1b94:	a8 18       	sub	r10, r8
    1b96:	44 c0       	rjmp	.+136    	; 0x1c20 <vfprintf+0x290>
    1b98:	85 37       	cpi	r24, 0x75	; 117
    1b9a:	29 f4       	brne	.+10     	; 0x1ba6 <vfprintf+0x216>
    1b9c:	2f 7e       	andi	r18, 0xEF	; 239
    1b9e:	b2 2e       	mov	r11, r18
    1ba0:	2a e0       	ldi	r18, 0x0A	; 10
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	25 c0       	rjmp	.+74     	; 0x1bf0 <vfprintf+0x260>
    1ba6:	f2 2f       	mov	r31, r18
    1ba8:	f9 7f       	andi	r31, 0xF9	; 249
    1baa:	bf 2e       	mov	r11, r31
    1bac:	8f 36       	cpi	r24, 0x6F	; 111
    1bae:	c1 f0       	breq	.+48     	; 0x1be0 <vfprintf+0x250>
    1bb0:	18 f4       	brcc	.+6      	; 0x1bb8 <vfprintf+0x228>
    1bb2:	88 35       	cpi	r24, 0x58	; 88
    1bb4:	79 f0       	breq	.+30     	; 0x1bd4 <vfprintf+0x244>
    1bb6:	b4 c0       	rjmp	.+360    	; 0x1d20 <vfprintf+0x390>
    1bb8:	80 37       	cpi	r24, 0x70	; 112
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <vfprintf+0x232>
    1bbc:	88 37       	cpi	r24, 0x78	; 120
    1bbe:	21 f0       	breq	.+8      	; 0x1bc8 <vfprintf+0x238>
    1bc0:	af c0       	rjmp	.+350    	; 0x1d20 <vfprintf+0x390>
    1bc2:	2f 2f       	mov	r18, r31
    1bc4:	20 61       	ori	r18, 0x10	; 16
    1bc6:	b2 2e       	mov	r11, r18
    1bc8:	b4 fe       	sbrs	r11, 4
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <vfprintf+0x256>
    1bcc:	8b 2d       	mov	r24, r11
    1bce:	84 60       	ori	r24, 0x04	; 4
    1bd0:	b8 2e       	mov	r11, r24
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <vfprintf+0x256>
    1bd4:	24 ff       	sbrs	r18, 4
    1bd6:	0a c0       	rjmp	.+20     	; 0x1bec <vfprintf+0x25c>
    1bd8:	9f 2f       	mov	r25, r31
    1bda:	96 60       	ori	r25, 0x06	; 6
    1bdc:	b9 2e       	mov	r11, r25
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <vfprintf+0x25c>
    1be0:	28 e0       	ldi	r18, 0x08	; 8
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <vfprintf+0x260>
    1be6:	20 e1       	ldi	r18, 0x10	; 16
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <vfprintf+0x260>
    1bec:	20 e1       	ldi	r18, 0x10	; 16
    1bee:	32 e0       	ldi	r19, 0x02	; 2
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	b7 fe       	sbrs	r11, 7
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <vfprintf+0x274>
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	0c 5f       	subi	r16, 0xFC	; 252
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <vfprintf+0x280>
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 5f       	subi	r16, 0xFE	; 254
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	a4 01       	movw	r20, r8
    1c12:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__ultoa_invert>
    1c16:	a8 2e       	mov	r10, r24
    1c18:	a8 18       	sub	r10, r8
    1c1a:	fb 2d       	mov	r31, r11
    1c1c:	ff 77       	andi	r31, 0x7F	; 127
    1c1e:	bf 2e       	mov	r11, r31
    1c20:	b6 fe       	sbrs	r11, 6
    1c22:	0b c0       	rjmp	.+22     	; 0x1c3a <vfprintf+0x2aa>
    1c24:	2b 2d       	mov	r18, r11
    1c26:	2e 7f       	andi	r18, 0xFE	; 254
    1c28:	a5 14       	cp	r10, r5
    1c2a:	50 f4       	brcc	.+20     	; 0x1c40 <vfprintf+0x2b0>
    1c2c:	b4 fe       	sbrs	r11, 4
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <vfprintf+0x2b4>
    1c30:	b2 fc       	sbrc	r11, 2
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <vfprintf+0x2b4>
    1c34:	2b 2d       	mov	r18, r11
    1c36:	2e 7e       	andi	r18, 0xEE	; 238
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <vfprintf+0x2b4>
    1c3a:	7a 2c       	mov	r7, r10
    1c3c:	2b 2d       	mov	r18, r11
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <vfprintf+0x2b6>
    1c40:	7a 2c       	mov	r7, r10
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <vfprintf+0x2b6>
    1c44:	75 2c       	mov	r7, r5
    1c46:	24 ff       	sbrs	r18, 4
    1c48:	0d c0       	rjmp	.+26     	; 0x1c64 <vfprintf+0x2d4>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ea 0d       	add	r30, r10
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	80 81       	ld	r24, Z
    1c52:	80 33       	cpi	r24, 0x30	; 48
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <vfprintf+0x2ca>
    1c56:	29 7e       	andi	r18, 0xE9	; 233
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <vfprintf+0x2dc>
    1c5a:	22 ff       	sbrs	r18, 2
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <vfprintf+0x2da>
    1c5e:	73 94       	inc	r7
    1c60:	73 94       	inc	r7
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <vfprintf+0x2dc>
    1c64:	82 2f       	mov	r24, r18
    1c66:	86 78       	andi	r24, 0x86	; 134
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <vfprintf+0x2dc>
    1c6a:	73 94       	inc	r7
    1c6c:	23 fd       	sbrc	r18, 3
    1c6e:	13 c0       	rjmp	.+38     	; 0x1c96 <vfprintf+0x306>
    1c70:	20 ff       	sbrs	r18, 0
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0x2f0>
    1c74:	5a 2c       	mov	r5, r10
    1c76:	73 14       	cp	r7, r3
    1c78:	18 f4       	brcc	.+6      	; 0x1c80 <vfprintf+0x2f0>
    1c7a:	53 0c       	add	r5, r3
    1c7c:	57 18       	sub	r5, r7
    1c7e:	73 2c       	mov	r7, r3
    1c80:	73 14       	cp	r7, r3
    1c82:	68 f4       	brcc	.+26     	; 0x1c9e <vfprintf+0x30e>
    1c84:	b7 01       	movw	r22, r14
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	2c 87       	std	Y+12, r18	; 0x0c
    1c8c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1c90:	73 94       	inc	r7
    1c92:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c94:	f5 cf       	rjmp	.-22     	; 0x1c80 <vfprintf+0x2f0>
    1c96:	73 14       	cp	r7, r3
    1c98:	10 f4       	brcc	.+4      	; 0x1c9e <vfprintf+0x30e>
    1c9a:	37 18       	sub	r3, r7
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <vfprintf+0x310>
    1c9e:	31 2c       	mov	r3, r1
    1ca0:	24 ff       	sbrs	r18, 4
    1ca2:	12 c0       	rjmp	.+36     	; 0x1cc8 <vfprintf+0x338>
    1ca4:	b7 01       	movw	r22, r14
    1ca6:	80 e3       	ldi	r24, 0x30	; 48
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	2c 87       	std	Y+12, r18	; 0x0c
    1cac:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cb2:	22 ff       	sbrs	r18, 2
    1cb4:	17 c0       	rjmp	.+46     	; 0x1ce4 <vfprintf+0x354>
    1cb6:	21 ff       	sbrs	r18, 1
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <vfprintf+0x330>
    1cba:	88 e5       	ldi	r24, 0x58	; 88
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <vfprintf+0x334>
    1cc0:	88 e7       	ldi	r24, 0x78	; 120
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	b7 01       	movw	r22, r14
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <vfprintf+0x350>
    1cc8:	82 2f       	mov	r24, r18
    1cca:	86 78       	andi	r24, 0x86	; 134
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <vfprintf+0x354>
    1cce:	21 fd       	sbrc	r18, 1
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <vfprintf+0x346>
    1cd2:	80 e2       	ldi	r24, 0x20	; 32
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <vfprintf+0x348>
    1cd6:	8b e2       	ldi	r24, 0x2B	; 43
    1cd8:	27 fd       	sbrc	r18, 7
    1cda:	8d e2       	ldi	r24, 0x2D	; 45
    1cdc:	b7 01       	movw	r22, r14
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1ce4:	a5 14       	cp	r10, r5
    1ce6:	38 f4       	brcc	.+14     	; 0x1cf6 <vfprintf+0x366>
    1ce8:	b7 01       	movw	r22, r14
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1cf2:	5a 94       	dec	r5
    1cf4:	f7 cf       	rjmp	.-18     	; 0x1ce4 <vfprintf+0x354>
    1cf6:	aa 94       	dec	r10
    1cf8:	f4 01       	movw	r30, r8
    1cfa:	ea 0d       	add	r30, r10
    1cfc:	f1 1d       	adc	r31, r1
    1cfe:	80 81       	ld	r24, Z
    1d00:	b7 01       	movw	r22, r14
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1d08:	a1 10       	cpse	r10, r1
    1d0a:	f5 cf       	rjmp	.-22     	; 0x1cf6 <vfprintf+0x366>
    1d0c:	33 20       	and	r3, r3
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <vfprintf+0x382>
    1d10:	51 ce       	rjmp	.-862    	; 0x19b4 <vfprintf+0x24>
    1d12:	b7 01       	movw	r22, r14
    1d14:	80 e2       	ldi	r24, 0x20	; 32
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fputc>
    1d1c:	3a 94       	dec	r3
    1d1e:	f6 cf       	rjmp	.-20     	; 0x1d0c <vfprintf+0x37c>
    1d20:	f7 01       	movw	r30, r14
    1d22:	86 81       	ldd	r24, Z+6	; 0x06
    1d24:	97 81       	ldd	r25, Z+7	; 0x07
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <vfprintf+0x39c>
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	9f ef       	ldi	r25, 0xFF	; 255
    1d2c:	2c 96       	adiw	r28, 0x0c	; 12
    1d2e:	e2 e1       	ldi	r30, 0x12	; 18
    1d30:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__>

00001d34 <strnlen_P>:
    1d34:	fc 01       	movw	r30, r24
    1d36:	05 90       	lpm	r0, Z+
    1d38:	61 50       	subi	r22, 0x01	; 1
    1d3a:	70 40       	sbci	r23, 0x00	; 0
    1d3c:	01 10       	cpse	r0, r1
    1d3e:	d8 f7       	brcc	.-10     	; 0x1d36 <strnlen_P+0x2>
    1d40:	80 95       	com	r24
    1d42:	90 95       	com	r25
    1d44:	8e 0f       	add	r24, r30
    1d46:	9f 1f       	adc	r25, r31
    1d48:	08 95       	ret

00001d4a <strnlen>:
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	61 50       	subi	r22, 0x01	; 1
    1d4e:	70 40       	sbci	r23, 0x00	; 0
    1d50:	01 90       	ld	r0, Z+
    1d52:	01 10       	cpse	r0, r1
    1d54:	d8 f7       	brcc	.-10     	; 0x1d4c <strnlen+0x2>
    1d56:	80 95       	com	r24
    1d58:	90 95       	com	r25
    1d5a:	8e 0f       	add	r24, r30
    1d5c:	9f 1f       	adc	r25, r31
    1d5e:	08 95       	ret

00001d60 <fputc>:
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	18 2f       	mov	r17, r24
    1d6a:	09 2f       	mov	r16, r25
    1d6c:	eb 01       	movw	r28, r22
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	81 fd       	sbrc	r24, 1
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <fputc+0x1a>
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	20 c0       	rjmp	.+64     	; 0x1dba <fputc+0x5a>
    1d7a:	82 ff       	sbrs	r24, 2
    1d7c:	10 c0       	rjmp	.+32     	; 0x1d9e <fputc+0x3e>
    1d7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d80:	5f 81       	ldd	r21, Y+7	; 0x07
    1d82:	2c 81       	ldd	r18, Y+4	; 0x04
    1d84:	3d 81       	ldd	r19, Y+5	; 0x05
    1d86:	42 17       	cp	r20, r18
    1d88:	53 07       	cpc	r21, r19
    1d8a:	7c f4       	brge	.+30     	; 0x1daa <fputc+0x4a>
    1d8c:	e8 81       	ld	r30, Y
    1d8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d90:	9f 01       	movw	r18, r30
    1d92:	2f 5f       	subi	r18, 0xFF	; 255
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	39 83       	std	Y+1, r19	; 0x01
    1d98:	28 83       	st	Y, r18
    1d9a:	10 83       	st	Z, r17
    1d9c:	06 c0       	rjmp	.+12     	; 0x1daa <fputc+0x4a>
    1d9e:	e8 85       	ldd	r30, Y+8	; 0x08
    1da0:	f9 85       	ldd	r31, Y+9	; 0x09
    1da2:	81 2f       	mov	r24, r17
    1da4:	09 95       	icall
    1da6:	89 2b       	or	r24, r25
    1da8:	29 f7       	brne	.-54     	; 0x1d74 <fputc+0x14>
    1daa:	2e 81       	ldd	r18, Y+6	; 0x06
    1dac:	3f 81       	ldd	r19, Y+7	; 0x07
    1dae:	2f 5f       	subi	r18, 0xFF	; 255
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	3f 83       	std	Y+7, r19	; 0x07
    1db4:	2e 83       	std	Y+6, r18	; 0x06
    1db6:	81 2f       	mov	r24, r17
    1db8:	90 2f       	mov	r25, r16
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	08 95       	ret

00001dc4 <__ultoa_invert>:
    1dc4:	fa 01       	movw	r30, r20
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	28 30       	cpi	r18, 0x08	; 8
    1dca:	51 f1       	breq	.+84     	; 0x1e20 <__ultoa_invert+0x5c>
    1dcc:	20 31       	cpi	r18, 0x10	; 16
    1dce:	81 f1       	breq	.+96     	; 0x1e30 <__ultoa_invert+0x6c>
    1dd0:	e8 94       	clt
    1dd2:	6f 93       	push	r22
    1dd4:	6e 7f       	andi	r22, 0xFE	; 254
    1dd6:	6e 5f       	subi	r22, 0xFE	; 254
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	8f 4f       	sbci	r24, 0xFF	; 255
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	af 4f       	sbci	r26, 0xFF	; 255
    1de0:	b1 e0       	ldi	r27, 0x01	; 1
    1de2:	3e d0       	rcall	.+124    	; 0x1e60 <__ultoa_invert+0x9c>
    1de4:	b4 e0       	ldi	r27, 0x04	; 4
    1de6:	3c d0       	rcall	.+120    	; 0x1e60 <__ultoa_invert+0x9c>
    1de8:	67 0f       	add	r22, r23
    1dea:	78 1f       	adc	r23, r24
    1dec:	89 1f       	adc	r24, r25
    1dee:	9a 1f       	adc	r25, r26
    1df0:	a1 1d       	adc	r26, r1
    1df2:	68 0f       	add	r22, r24
    1df4:	79 1f       	adc	r23, r25
    1df6:	8a 1f       	adc	r24, r26
    1df8:	91 1d       	adc	r25, r1
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	6a 0f       	add	r22, r26
    1dfe:	71 1d       	adc	r23, r1
    1e00:	81 1d       	adc	r24, r1
    1e02:	91 1d       	adc	r25, r1
    1e04:	a1 1d       	adc	r26, r1
    1e06:	20 d0       	rcall	.+64     	; 0x1e48 <__ultoa_invert+0x84>
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <__ultoa_invert+0x48>
    1e0a:	68 94       	set
    1e0c:	3f 91       	pop	r19
    1e0e:	2a e0       	ldi	r18, 0x0A	; 10
    1e10:	26 9f       	mul	r18, r22
    1e12:	11 24       	eor	r1, r1
    1e14:	30 19       	sub	r19, r0
    1e16:	30 5d       	subi	r19, 0xD0	; 208
    1e18:	31 93       	st	Z+, r19
    1e1a:	de f6       	brtc	.-74     	; 0x1dd2 <__ultoa_invert+0xe>
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	08 95       	ret
    1e20:	46 2f       	mov	r20, r22
    1e22:	47 70       	andi	r20, 0x07	; 7
    1e24:	40 5d       	subi	r20, 0xD0	; 208
    1e26:	41 93       	st	Z+, r20
    1e28:	b3 e0       	ldi	r27, 0x03	; 3
    1e2a:	0f d0       	rcall	.+30     	; 0x1e4a <__ultoa_invert+0x86>
    1e2c:	c9 f7       	brne	.-14     	; 0x1e20 <__ultoa_invert+0x5c>
    1e2e:	f6 cf       	rjmp	.-20     	; 0x1e1c <__ultoa_invert+0x58>
    1e30:	46 2f       	mov	r20, r22
    1e32:	4f 70       	andi	r20, 0x0F	; 15
    1e34:	40 5d       	subi	r20, 0xD0	; 208
    1e36:	4a 33       	cpi	r20, 0x3A	; 58
    1e38:	18 f0       	brcs	.+6      	; 0x1e40 <__ultoa_invert+0x7c>
    1e3a:	49 5d       	subi	r20, 0xD9	; 217
    1e3c:	31 fd       	sbrc	r19, 1
    1e3e:	40 52       	subi	r20, 0x20	; 32
    1e40:	41 93       	st	Z+, r20
    1e42:	02 d0       	rcall	.+4      	; 0x1e48 <__ultoa_invert+0x84>
    1e44:	a9 f7       	brne	.-22     	; 0x1e30 <__ultoa_invert+0x6c>
    1e46:	ea cf       	rjmp	.-44     	; 0x1e1c <__ultoa_invert+0x58>
    1e48:	b4 e0       	ldi	r27, 0x04	; 4
    1e4a:	a6 95       	lsr	r26
    1e4c:	97 95       	ror	r25
    1e4e:	87 95       	ror	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	ba 95       	dec	r27
    1e56:	c9 f7       	brne	.-14     	; 0x1e4a <__ultoa_invert+0x86>
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	61 05       	cpc	r22, r1
    1e5c:	71 05       	cpc	r23, r1
    1e5e:	08 95       	ret
    1e60:	9b 01       	movw	r18, r22
    1e62:	ac 01       	movw	r20, r24
    1e64:	0a 2e       	mov	r0, r26
    1e66:	06 94       	lsr	r0
    1e68:	57 95       	ror	r21
    1e6a:	47 95       	ror	r20
    1e6c:	37 95       	ror	r19
    1e6e:	27 95       	ror	r18
    1e70:	ba 95       	dec	r27
    1e72:	c9 f7       	brne	.-14     	; 0x1e66 <__ultoa_invert+0xa2>
    1e74:	62 0f       	add	r22, r18
    1e76:	73 1f       	adc	r23, r19
    1e78:	84 1f       	adc	r24, r20
    1e7a:	95 1f       	adc	r25, r21
    1e7c:	a0 1d       	adc	r26, r0
    1e7e:	08 95       	ret

00001e80 <__muluhisi3>:
    1e80:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__umulhisi3>
    1e84:	a5 9f       	mul	r26, r21
    1e86:	90 0d       	add	r25, r0
    1e88:	b4 9f       	mul	r27, r20
    1e8a:	90 0d       	add	r25, r0
    1e8c:	a4 9f       	mul	r26, r20
    1e8e:	80 0d       	add	r24, r0
    1e90:	91 1d       	adc	r25, r1
    1e92:	11 24       	eor	r1, r1
    1e94:	08 95       	ret

00001e96 <__mulshisi3>:
    1e96:	b7 ff       	sbrs	r27, 7
    1e98:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__muluhisi3>

00001e9c <__mulohisi3>:
    1e9c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__muluhisi3>
    1ea0:	82 1b       	sub	r24, r18
    1ea2:	93 0b       	sbc	r25, r19
    1ea4:	08 95       	ret

00001ea6 <__prologue_saves__>:
    1ea6:	2f 92       	push	r2
    1ea8:	3f 92       	push	r3
    1eaa:	4f 92       	push	r4
    1eac:	5f 92       	push	r5
    1eae:	6f 92       	push	r6
    1eb0:	7f 92       	push	r7
    1eb2:	8f 92       	push	r8
    1eb4:	9f 92       	push	r9
    1eb6:	af 92       	push	r10
    1eb8:	bf 92       	push	r11
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	ca 1b       	sub	r28, r26
    1ed0:	db 0b       	sbc	r29, r27
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	09 94       	ijmp

00001ede <__epilogue_restores__>:
    1ede:	2a 88       	ldd	r2, Y+18	; 0x12
    1ee0:	39 88       	ldd	r3, Y+17	; 0x11
    1ee2:	48 88       	ldd	r4, Y+16	; 0x10
    1ee4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ee6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ee8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ef0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ef2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ef4:	df 80       	ldd	r13, Y+7	; 0x07
    1ef6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ef8:	fd 80       	ldd	r15, Y+5	; 0x05
    1efa:	0c 81       	ldd	r16, Y+4	; 0x04
    1efc:	1b 81       	ldd	r17, Y+3	; 0x03
    1efe:	aa 81       	ldd	r26, Y+2	; 0x02
    1f00:	b9 81       	ldd	r27, Y+1	; 0x01
    1f02:	ce 0f       	add	r28, r30
    1f04:	d1 1d       	adc	r29, r1
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	ed 01       	movw	r28, r26
    1f12:	08 95       	ret

00001f14 <__umulhisi3>:
    1f14:	a2 9f       	mul	r26, r18
    1f16:	b0 01       	movw	r22, r0
    1f18:	b3 9f       	mul	r27, r19
    1f1a:	c0 01       	movw	r24, r0
    1f1c:	a3 9f       	mul	r26, r19
    1f1e:	70 0d       	add	r23, r0
    1f20:	81 1d       	adc	r24, r1
    1f22:	11 24       	eor	r1, r1
    1f24:	91 1d       	adc	r25, r1
    1f26:	b2 9f       	mul	r27, r18
    1f28:	70 0d       	add	r23, r0
    1f2a:	81 1d       	adc	r24, r1
    1f2c:	11 24       	eor	r1, r1
    1f2e:	91 1d       	adc	r25, r1
    1f30:	08 95       	ret

00001f32 <_exit>:
    1f32:	f8 94       	cli

00001f34 <__stop_program>:
    1f34:	ff cf       	rjmp	.-2      	; 0x1f34 <__stop_program>
